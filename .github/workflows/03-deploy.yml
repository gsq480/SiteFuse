# .github/workflows/03-deploy.yml
name: Deploy Theme

on:
  workflow_dispatch:
    inputs:
      theme_artifact:
        description: 'Theme artifact name (theme-<slug>-<run_id>)'
        required: true
        type: string
      slug:
        description: 'Theme slug'
        required: true
        type: string
      name:
        description: 'Site name'
        required: true
        type: string
      tagline:
        description: 'Site tagline'
        required: true
        type: string
  workflow_call:
    inputs:
      theme_artifact: { required: true, type: string }
      slug:           { required: true, type: string }
      name:           { required: true, type: string }
      tagline:        { required: true, type: string }

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDWAYS_HOST: ${{ secrets.CLOUDWAYS_HOST }}
      CLOUDWAYS_USER: ${{ secrets.CLOUDWAYS_USER }}
      CLOUDWAYS_KEY:  ${{ secrets.CLOUDWAYS_KEY }}
      APP_PATH:       ${{ secrets.APP_PATH }}
    steps:
      - uses: actions/checkout@v4

      - name: Download built theme
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.theme_artifact }}
          path: theme-files/

      - name: Setup SSH
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$CLOUDWAYS_KEY" > ~/.ssh/id_rsa_cloudways
          chmod 600 ~/.ssh/id_rsa_cloudways
          ssh-keyscan -H "$CLOUDWAYS_HOST" >> ~/.ssh/known_hosts

      - name: Sanity check remote APP_PATH
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no \
            "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "APP_PATH='${APP_PATH}' bash -s" <<'EOF'
          set -euo pipefail
          : "${APP_PATH:?APP_PATH is not set on remote}"
          if [ ! -d "$APP_PATH" ]; then
            echo "Remote APP_PATH does not exist: $APP_PATH" >&2
            exit 1
          fi
          echo "OK: APP_PATH is $APP_PATH"
          EOF

      - name: Deploy child theme and website.json
        env:
          SLUG: ${{ inputs.slug }}
        run: |
          set -e
          THEME_DEST="$APP_PATH/wp-content/themes/${SLUG}-child"
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "mkdir -p '$THEME_DEST'"
          rsync -avz --delete -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
            "theme-files/" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$THEME_DEST/"
          if [ -f "theme-files/website.json" ]; then
            rsync -avz -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
              "theme-files/website.json" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/"
          fi

      - name: Deploy mu-plugins from repo
        run: |
          set -e
          # Ensure remote folder exists
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "mkdir -p '$APP_PATH/wp-content/mu-plugins/sitefuse'"
          # Sync your repo mu-plugin folder (edit path if you placed it elsewhere)
          if [ -d "wp-content/mu-plugins/sitefuse" ]; then
            rsync -avz --delete -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
              wp-content/mu-plugins/sitefuse/ \
              "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/wp-content/mu-plugins/sitefuse/"
          else
            echo "Warning: wp-content/mu-plugins/sitefuse not found in repo, skipping sync"
          fi

      - name: Upload blocks-config.json to server
        run: |
          set -e
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa_cloudways \
            blocks-config.json \
            "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/wp-content/mu-plugins/sitefuse/blocks-config.json"

      - name: Verify mu-plugin and config on server
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "ls -la '$APP_PATH/wp-content/mu-plugins/sitefuse' && \
             test -f '$APP_PATH/wp-content/mu-plugins/sitefuse/sitefuse-home.php' && echo 'mu-plugin OK' && \
             test -f '$APP_PATH/wp-content/mu-plugins/sitefuse/blocks-config.json' && echo 'blocks-config OK'"

      - name: Configure WordPress (theme, pages, menu, homepage content)
        env:
          SLUG: ${{ inputs.slug }}
          NAME: ${{ inputs.name }}
          TAGLINE: ${{ inputs.tagline }}
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "APP_PATH='${APP_PATH}' SLUG='${SLUG}' NAME='${NAME}' TAGLINE='${TAGLINE}' bash -s" <<'EOS'
          set -euo pipefail
          cd "$APP_PATH"

          wp option update blogname "$NAME" --allow-root
          wp option update blogdescription "$TAGLINE" --allow-root
          wp theme activate "${SLUG}-child" --allow-root

          HOME_ID=$(wp post list --post_type=page --name=home --field=ID --allow-root | head -1)
          if [ -z "$HOME_ID" ]; then
            HOME_ID=$(wp post create --post_type=page --post_title="Home" --post_name="home" --post_status=publish --porcelain --allow-root)
          fi
          wp post update "$HOME_ID" --post_content="[sitefuse_home]" --allow-root
          wp option update show_on_front page --allow-root
          wp option update page_on_front "$HOME_ID" --allow-root

          wp menu delete "Primary Menu" --allow-root 2>/dev/null || true
          wp menu create "Primary Menu" --allow-root
          for slug in home about services contact; do
            ID=$(wp post list --post_type=page --name="$slug" --field=ID --allow-root | head -1)
            if [ -z "$ID" ] && [ "$slug" != "home" ]; then
              TITLE=$(echo "${slug^}")
              ID=$(wp post create --post_type=page --post_title="$TITLE" --post_name="$slug" --post_status=publish --porcelain --allow-root)
            fi
            [ -n "$ID" ] && wp menu item add-post "Primary Menu" "$ID" --title="$(echo "${slug^}")" --allow-root
          done
          wp menu location assign "Primary Menu" primary --allow-root
          wp rewrite flush --allow-root
          EOS

      - name: Report deployment
        env:
          NAME: ${{ inputs.name }}
          SLUG: ${{ inputs.slug }}
        run: |
          echo "‚úÖ Deployment completed"
          echo "üè¢ Site Name: ${NAME}"
          echo "üîß Theme: ${SLUG}-child"
          echo "üåê Visit via your Cloudways domain for this app"