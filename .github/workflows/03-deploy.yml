# .github/workflows/03-deploy.yml
name: Deploy Theme

on:
  workflow_dispatch:
    inputs:
      theme_artifact:
        description: 'Theme artifact name'
        required: true
        type: string
      slug:
        description: 'Theme slug'
        required: true
        type: string
      name:
        description: 'Site name'
        required: true
        type: string
      tagline:
        description: 'Site tagline'
        required: true
        type: string
  workflow_call:
    inputs:
      theme_artifact:
        required: true
        type: string
      slug:
        required: true
        type: string
      name:
        required: true
        type: string
      tagline:
        required: true
        type: string

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      CLOUDWAYS_HOST: ${{ secrets.CLOUDWAYS_HOST }}
      CLOUDWAYS_USER: ${{ secrets.CLOUDWAYS_USER }}
      CLOUDWAYS_KEY: ${{ secrets.CLOUDWAYS_KEY }}
      APP_PATH: ${{ secrets.APP_PATH }}
    steps:
      - uses: actions/checkout@v4

      - name: Download built theme
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.theme_artifact }}
          path: theme-files/

      - name: Setup SSH
        run: |
          set -e
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          echo "$CLOUDWAYS_KEY" > ~/.ssh/id_rsa_cloudways
          chmod 600 ~/.ssh/id_rsa_cloudways
          ssh-keyscan -H "$CLOUDWAYS_HOST" >> ~/.ssh/known_hosts

      - name: Deploy parent theme if present
        run: |
          set -e
          if [ -d "sitefuse-base" ]; then
            PARENT_DEST="$APP_PATH/wp-content/themes/sitefuse-base"
            ssh -i ~/.ssh/id_rsa_cloudways "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "mkdir -p '$PARENT_DEST'"
            rsync -avz --delete -e 'ssh -i ~/.ssh/id_rsa_cloudways' \
              "sitefuse-base/" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$PARENT_DEST/"
          fi

      - name: Deploy child theme and website.json
        env:
          SLUG: ${{ inputs.slug }}
        run: |
          set -e
          THEME_DEST="$APP_PATH/wp-content/themes/${SLUG}-child"
          ssh -i ~/.ssh/id_rsa_cloudways "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "mkdir -p '$THEME_DEST'"
          rsync -avz --delete -e 'ssh -i ~/.ssh/id_rsa_cloudways' \
            "theme-files/" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$THEME_DEST/"

          if [ -f "theme-files/website.json" ]; then
            rsync -avz -e 'ssh -i ~/.ssh/id_rsa_cloudways' \
              "theme-files/website.json" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/"
          fi

      - name: Install MU plugin fallback renderer
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa_cloudways "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "bash -s" << 'EOS'
          set -e
          MU_DIR="$APP_PATH/wp-content/mu-plugins"
          mkdir -p "$MU_DIR"
          cat > "$MU_DIR/sitefuse-home.php" <<'PHP'
          <?php
          /*
           * Plugin Name: SiteFuse Home Renderer
           * Description: Shortcode [sitefuse_home] renders hero and custom sections from website.json
           */
          add_shortcode('sitefuse_home', function () {
              $p = ABSPATH . 'website.json';
              $cfg = is_readable($p) ? json_decode(file_get_contents($p), true) ?: [] : [];
              $hero_html  = $cfg['heroSection']['customHTML'] ?? '';
              $hero_image = $cfg['heroSection']['heroImage'] ?? '';
              ob_start(); ?>
              <section class="hero-section relative">
                <div class="absolute inset-0">
                  <?php if ($hero_image): ?>
                    <img src="<?php echo esc_url($hero_image); ?>" alt="<?php echo esc_attr(get_bloginfo('name')); ?>" class="w-full h-full object-cover" />
                  <?php endif; ?>
                </div>
                <div class="relative z-10 container text-center text-white py-24">
                  <?php
                    if ($hero_html) echo wp_kses_post($hero_html);
                    else {
                      echo '<h1 class="text-4xl font-bold mb-6">'.esc_html(get_bloginfo('name')).'</h1>';
                      echo '<p class="text-xl mb-8">'.esc_html(get_bloginfo('description')).'</p>';
                    }
                  ?>
                </div>
              </section>
              <?php
              if (!empty($cfg['customSections']) && is_array($cfg['customSections'])) {
                foreach ($cfg['customSections'] as $i => $s) {
                  if (!empty($s['html']) && is_string($s['html'])) {
                    echo "\n<!-- ai-section-$i -->\n";
                    echo wp_kses_post($s['html']);
                  }
                }
              }
              return ob_get_clean();
          });
          PHP
          EOS

      - name: Provision site from website.json
        env:
          SLUG: ${{ inputs.slug }}
          NAME: ${{ inputs.name }}
          TAGLINE: ${{ inputs.tagline }}
        run: |
          set -e
          ssh -i ~/.ssh/id_rsa_cloudways "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "bash -s" << 'EOS'
          set -e
          cd "$APP_PATH"

          # Basic checks
          if ! command -v wp >/dev/null 2>&1; then
            echo "wp-cli not found"
            exit 1
          fi
          if [ ! -f "website.json" ]; then
            echo "website.json not found at $APP_PATH"
            exit 1
          fi

          # Site identity
          wp option update blogname "$NAME" --allow-root
          wp option update blogdescription "$TAGLINE" --allow-root

          # Activate child theme
          wp theme activate "${SLUG}-child" --allow-root

          # Drive provisioning from JSON
          php -r '
            $app = getenv("APP_PATH") ?: ".";
            $j = file_get_contents($app . "/website.json");
            $d = json_decode($j, true) ?: [];
            $pages = $d["pages"] ?? [];
            $nav   = $d["nav"]   ?? [];
            $ecom  = (bool)($d["ecommerce"]["enabled"] ?? false);

            // Upsert pages from pages[]
            $seenSlugs = [];
            foreach ($pages as $p) {
              $slug = $p["slug"] ?? "";
              $title = $p["title"] ?? "";
              if ($slug === "" || $title === "") continue;
              $seenSlugs[] = $slug;

              $id = trim(shell_exec("wp post list --post_type=page --name=" . escapeshellarg($slug) . " --field=ID --allow-root"));
              if ($id === "") {
                $id = trim(shell_exec("wp post create --post_type=page --post_status=publish --post_name=" . escapeshellarg($slug) . " --post_title=" . escapeshellarg($title) . " --porcelain --allow-root"));
              } else {
                shell_exec("wp post update $id --post_title=" . escapeshellarg($title) . " --allow-root");
              }

              // Compose content: prefer registered patterns, fallback to raw HTML
              $sections = $p["sections"] ?? [];
              $content = "";
              $i = 0;
              foreach ($sections as $_) {
                $content .= "<!-- wp:pattern {\"slug\":\"sitefuse/{$slug}-{$i}\"} /-->\n";
                $i++;
              }
              if ($content === "" && !empty($sections)) {
                foreach ($sections as $s) {
                  $html = $s["html"] ?? "";
                  if ($html) $content .= $html . "\n";
                }
              }

              $tmp = tempnam(sys_get_temp_dir(), "sf-");
              file_put_contents($tmp, $content);
              shell_exec("wp post update $id --post_content=" . escapeshellarg($tmp) . " --allow-root");
              @unlink($tmp);
            }

            // Delete any existing pages not present in JSON pages[]
            // Keep a conservative exclude list
            $exclude = ["privacy-policy","shop","cart","checkout","my-account","terms","conditions","refunds","returns"];
            $allSlugs = array_filter(explode("\n", trim(shell_exec("wp post list --post_type=page --field=post_name --allow-root"))));
            foreach ($allSlugs as $slug) {
              if ($slug === "" || in_array($slug, $exclude, true)) continue;
              if (!in_array($slug, $seenSlugs, true)) {
                $id = trim(shell_exec("wp post list --post_type=page --name=" . escapeshellarg($slug) . " --field=ID --allow-root"));
                if ($id !== "") {
                  shell_exec("wp post delete $id --force --allow-root");
                }
              }
            }

            // Set Home as static front page if present
            $homeId = trim(shell_exec("wp post list --post_type=page --name=home --field=ID --allow-root | head -1"));
            if ($homeId !== "") {
              shell_exec("wp option update show_on_front page --allow-root");
              shell_exec("wp option update page_on_front $homeId --allow-root");
            }

            // Build Primary Menu from nav[]
            shell_exec("wp menu delete \"Primary Menu\" --allow-root 2>/dev/null || true");
            shell_exec("wp menu create \"Primary Menu\" --allow-root");

            foreach ($nav as $item) {
              $label = $item["label"] ?? "";
              $href  = $item["href"]  ?? "/";
              if ($label === "") continue;

              $slug = trim($href, "/");
              if ($href === "/") {
                $pid = trim(shell_exec("wp post list --post_type=page --name=home --field=ID --allow-root"));
                if ($pid !== "") {
                  shell_exec("wp menu item add-post \"Primary Menu\" $pid --title=" . escapeshellarg($label) . " --allow-root");
                  continue;
                }
              }
              if ($slug !== "") {
                $pid = trim(shell_exec("wp post list --post_type=page --name=" . escapeshellarg($slug) . " --field=ID --allow-root"));
                if ($pid !== "") {
                  shell_exec("wp menu item add-post \"Primary Menu\" $pid --title=" . escapeshellarg($label) . " --allow-root");
                  continue;
                }
              }
              shell_exec("wp menu item add-custom \"Primary Menu\" " . escapeshellarg($label) . " " . escapeshellarg($href) . " --allow-root");
            }
            shell_exec("wp menu location assign \"Primary Menu\" primary --allow-root");

            // Optional WooCommerce pages
            if ($ecom) {
              shell_exec("wp plugin install woocommerce --activate --allow-root");
              shell_exec("wp wc tool run install_pages --user=1 --allow-root || true");
            }
          ' | sed -e "s/^/remote: /"

          # Flush permalinks at the end
          wp rewrite flush --allow-root
          EOS

      - name: Report deployment
        env:
          NAME: ${{ inputs.name }}
          SLUG: ${{ inputs.slug }}
        run: |
          echo "Deployment complete."
          echo "Site: ${NAME}"
          echo "Theme: ${SLUG}-child"
          echo "Pages are now in sync with website.json"
