name: Enhanced Child Theme from Prompt

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Describe your website, for example "Modern yoga studio with earth tones and mindfulness focus"'
        required: true
        type: string
      industry:
        description: 'Industry type'
        required: false
        type: choice
        options:
          - 'auto-detect'
          - 'restaurant'
          - 'yoga-studio'
          - 'law-firm'
          - 'photography'
          - 'consulting'
          - 'medical'
          - 'retail'
          - 'real-estate'
          - 'technology'
        default: 'auto-detect'
      generate_images:
        description: 'Generate AI images'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      CLOUDWAYS_HOST: ${{ secrets.CLOUDWAYS_HOST }}
      CLOUDWAYS_USER: ${{ secrets.CLOUDWAYS_USER }}
      CLOUDWAYS_KEY:  ${{ secrets.CLOUDWAYS_KEY }}
      APP_PATH:       ${{ secrets.APP_PATH }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: gsq480/SiteFuse
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: SSH setup
        run: |
          set -euo pipefail;
          echo "[setup] preparing ssh";
          mkdir -p ~/.ssh;
          chmod 700 ~/.ssh;
          printf '%s\n' "$CLOUDWAYS_KEY" > ~/.ssh/id_rsa_cloudways;
          chmod 600 ~/.ssh/id_rsa_cloudways;
          ssh-keyscan -H "$CLOUDWAYS_HOST" >> ~/.ssh/known_hosts;

      #####################################################################
      # AI PASS 1, base site JSON
      #####################################################################
      - name: AI pass 1, base website JSON
        id: ai1
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[ai1] generating base website json"
          cat > /tmp/payload.json <<'EOF'
          {
            "model":"gpt-4o-mini",
            "response_format":{"type":"json_object"},
            "messages":[
              {
                "role":"system",
                "content":"You are a professional web designer. Produce a complete website JSON with the following keys: slug, name, tagline, industry, designTheme, colorPalette {primary, secondary, accent, background, text}, typography {headingFont, bodyFont, accentFont}, heroSection {customHTML, heroImage}, customSections [{key, title, html}], services, testimonials, contact, footer, homepageLayout, servicesPageLayout. Use realistic copy and fully responsive Tailwind HTML fragments without templating placeholders."
              },
              {
                "role":"user",
                "content":"Create a complete website for: ${{ github.event.inputs.prompt }}. Industry hint: ${{ github.event.inputs.industry }}"
              }
            ]
          }
          EOF
          curl -sS "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload.json \
          | jq -r '.choices[0].message.content' > website-step1.json
          jq . website-step1.json | head -n 60 || true

      #####################################################################
      # AI PASS 2, section audit and improvement
      #####################################################################
      - name: AI pass 2, section audit and improvement
        id: ai2
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[ai2] auditing sections, adding or pruning for industry best practice"
          cat > /tmp/payload2.json <<'EOF'
          {
            "model":"gpt-4o-mini",
            "response_format":{"type":"json_object"},
            "messages":[
              {
                "role":"system",
                "content":"You are a senior UX director. Given a website JSON, audit whether sections are missing or redundant for the industry. Return an UPDATED website JSON. Improve heroSection customHTML for clarity, add or remove customSections where useful, and ensure servicesPageLayout is present and coherent. Preserve existing keys, extend rather than overwrite unless necessary."
              },
              {
                "role":"user",
                "content":"Here is the current JSON:\n```json\n"
              }
            ]
          }
          EOF
          jq --rawfile j website-step1.json \
            '.messages[1].content += $j + "\n```"' \
            /tmp/payload2.json > /tmp/payload2.ready.json
          curl -sS "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload2.ready.json \
          | jq -r '.choices[0].message.content' > website-step2.json
          jq . website-step2.json | head -n 60 || true

      #####################################################################
      # AI PASS 3, per section refinement
      #####################################################################
      - name: AI pass 3, per section refinement
        id: ai3
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[ai3] refining each section's HTML for responsiveness and accessibility"
          cat > /tmp/payload3.json <<'EOF'
          {
            "model":"gpt-4o-mini",
            "response_format":{"type":"json_object"},
            "messages":[
              {
                "role":"system",
                "content":"You are a front-end lead. Given a website JSON, refine every HTML fragment for responsiveness, accessible contrast, semantic structure, and Tailwind best practice. Return the full UPDATED JSON. Wrap loose fragments in container sections if needed. Do not introduce templating placeholders."
              },
              {
                "role":"user",
                "content":"Refine this JSON:\n```json\n"
              }
            ]
          }
          EOF
          jq --rawfile j website-step2.json \
            '.messages[1].content += $j + "\n```"' \
            /tmp/payload3.json > /tmp/payload3.ready.json
          curl -sS "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload3.ready.json \
          | jq -r '.choices[0].message.content' > website-step3.json
          jq . website-step3.json | head -n 60 || true

      #####################################################################
      # AI PASS 4, image prompt generation
      #####################################################################
      - name: AI pass 4, image prompt generation
        id: ai4
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[ai4] generating image prompts for hero and up to 3 sections"
          cat > /tmp/payload4.json <<'EOF'
          {
            "model":"gpt-4o-mini",
            "response_format":{"type":"json_object"},
            "messages":[
              {
                "role":"system",
                "content":"You are a creative director. From the website JSON, produce image prompt objects for: hero, and up to three high-impact custom sections. For each item output: key, target ('hero' or 'section'), prompt, aspect ('16:9' for hero, '4:3' for sections), and suggestedFilename. Return { images: [ ... ] }"
              },
              {
                "role":"user",
                "content":"Create image prompts for this JSON:\n```json\n"
              }
            ]
          }
          EOF
          jq --rawfile j website-step3.json \
            '.messages[1].content += $j + "\n```"' \
            /tmp/payload4.json > /tmp/payload4.ready.json
          curl -sS "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload4.ready.json \
          | jq -r '.choices[0].message.content' > image-prompts.json
          jq . image-prompts.json | head -n 60 || true

      #####################################################################
      # Merge JSON passes, normalise colours, extract core vars
      #####################################################################
      - name: Merge JSON passes and extract vars
        id: merge
        run: |
          set -euo pipefail;
          echo "[merge] merging website-step[1..3].json";
          jq -s '
            def dm(a; b):
              if (a|type)=="object" and (b|type)=="object" then
                reduce (b|keys_unsorted[]) as $k (a; .[$k] = dm(.[$k]; b[$k]))
              elif (a|type)=="array" and (b|type)=="array" then a + b
              else b end;
            def normalise(x):
              if x|type=="array" then reduce x[] as $e ({}; dm(.; $e)) else x end;
            reduce .[] as $doc ({}; dm(.; normalise($doc)))
          ' website-step1.json website-step2.json website-step3.json > website.json;

          echo "[merge] attach image prompts";
          jq --rawfile imgs image-prompts.json
            '.imagePrompts = (($imgs | fromjson | .images) // [])'
            website.json > website.tmp && mv website.tmp website.json;

          echo "[merge] normalising colours to #rrggbb lower-case";
          norm_hex() {
            local h="${1:-#2563eb}"; h="${h,,}"; h="${h#\#}";
            case "${#h}" in
              3) printf "#%s%s%s%s%s%s" "${h:0:1}" "${h:0:1}" "${h:1:1}" "${h:1:1}" "${h:2:1}" "${h:2:1}";;
              6) printf "#%s" "$h";;
              *) printf "#2563eb";;
            esac
          }
          BRAND=$(jq -r '.colorPalette.primary // "#2563eb"' website.json);
          ACCENT=$(jq -r '.colorPalette.accent  // "#3b82f6"' website.json);
          BRAND=$(norm_hex "$BRAND");
          ACCENT=$(norm_hex "$ACCENT");

          SLUG=$(jq -r '.slug // "new-site"' website.json | tr '[:upper:] ' '[:lower:]-' | tr -cd 'a-z0-9-_' | sed -E 's/^-+|-+$//g');
          [ -n "$SLUG" ] || SLUG=new-site;
          NAME=$(jq -r '.name // "New Site"' website.json);
          TAGLINE=$(jq -r '.tagline // "Welcome to our website"' website.json);
          HERO=$(jq -r '.heroSection.heroImage // empty' website.json);
          if [ -z "$HERO" ] || [ "$HERO" = "null" ]; then
            HERO="https://images.unsplash.com/photo-1497366216548-37526070297c?w=1200&h=800&fit=crop";
          fi

          {
            echo "slug=$SLUG";
            echo "name=$NAME";
            echo "tagline=$TAGLINE";
            echo "brand=$BRAND";
            echo "accent=$ACCENT";
            echo "hero=$HERO";
          } >> "$GITHUB_OUTPUT";

          echo "[merge] final website.json preview:";
          jq '.|{slug,name,tagline,industry,colorPalette,typography,(heroSection|keys),customSectionsCount:(.customSections|length)}' website.json || true;

      #####################################################################
      # Optional, generate AI images
      #####################################################################
      - name: Generate AI images from prompts
        if: ${{ github.event.inputs.generate_images == 'true' }}
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[images] creating images folder"
          mkdir -p "$GITHUB_WORKSPACE/${SLUG}-assets/img"
          mkdir -p "tmp_images"

          echo "[images] reading prompts"
          jq -c '.imagePrompts[]?' website.json | head -n 20 || true

          gen_one () {
            local prompt="$1"; local outfile="$2"
            echo "[images] generating $outfile"
            curl -sS "https://api.openai.com/v1/images/generations" \
              -H "Authorization: Bearer ${OPENAI_API_KEY}" \
              -H "Content-Type: application/json" \
              -d "$(jq -n --arg p "$prompt" --arg s "1024x576" '{model:"gpt-image-1",prompt:$p,size:$s}')" \
            | jq -r '.data[0].url // empty' > tmp_url.txt || true
            URL=$(cat tmp_url.txt || true)
            if [ -n "${URL:-}" ]; then
              curl -fsSL "$URL" -o "tmp_images/$outfile" --max-time 30 || true
            fi
          }

          # hero
          jq -c '.imagePrompts[]? | select(.target=="hero")' website.json | while read -r row; do
            prompt=$(echo "$row" | jq -r '.prompt')
            gen_one "$prompt" "hero.jpg"
          done

          # up to 3 sections
          jq -c '.imagePrompts[]? | select(.target=="section")' website.json | nl -ba | head -n 3 | while read -r n row; do
            p=$(echo "$row" | cut -f2-)
            prompt=$(echo "$p" | jq -r '.prompt')
            gen_one "$prompt" "section${n}.jpg"
          done

          # fallback
          if [ ! -s tmp_images/hero.jpg ]; then
            echo "[images] hero fallback"
            curl -fsSL "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=1600&h=900&fit=crop" -o tmp_images/hero.jpg --max-time 20 || true
          fi

          # move assets
          cp -f tmp_images/hero.jpg "$GITHUB_WORKSPACE/${SLUG}-assets/img/hero.jpg" || true
          cp -f tmp_images/section1.jpg "$GITHUB_WORKSPACE/${SLUG}-assets/img/section1.jpg" || true
          cp -f tmp_images/section2.jpg "$GITHUB_WORKSPACE/${SLUG}-assets/img/section2.jpg" || true
          cp -f tmp_images/section3.jpg "$GITHUB_WORKSPACE/${SLUG}-assets/img/section3.jpg" || true

      #####################################################################
      # Scaffold theme, fonts and hero fallback
      #####################################################################
      - name: Scaffold child theme in workspace
        env:
          SLUG:    ${{ steps.merge.outputs.slug }}
          NAME:    ${{ steps.merge.outputs.name }}
          TAGLINE: ${{ steps.merge.outputs.tagline }}
          BRAND:   ${{ steps.merge.outputs.brand }}
          ACCENT:  ${{ steps.merge.outputs.accent }}
          HERO:    ${{ steps.merge.outputs.hero }}
        run: |
          set -euo pipefail;
          echo "[scaffold] theme for $SLUG";
          THEME_DIR="$GITHUB_WORKSPACE/${SLUG}-child";
          mkdir -p "$THEME_DIR/assets/css" "$THEME_DIR/assets/js" "$THEME_DIR/assets/img" "$THEME_DIR/dist" "$THEME_DIR/templates" "$THEME_DIR/parts" "$THEME_DIR/inc";
          cp -f "$GITHUB_WORKSPACE/${SLUG}-assets/img/hero.jpg" "$THEME_DIR/assets/img/hero.jpg" 2>/dev/null || true;

          cat > "$THEME_DIR/style.css" <<CSS
          /*
          Theme Name: ${NAME}
          Description: Professional website built with SiteFuse
          Template: sitefuse-base
          Text Domain: ${SLUG}-child
          Version: 1.0.0
          */
          CSS

          cat > "$THEME_DIR/functions.php" <<'PHP'
          <?php
          add_action('wp_enqueue_scripts', function () {
            $parent = get_template_directory_uri() . '/dist/tailwind.css';
            wp_enqueue_style('sitefuse-parent', $parent, [], null);

            $child_path = get_stylesheet_directory() . '/dist/tailwind.css';
            $ver = file_exists($child_path) ? filemtime($child_path) : null;
            wp_enqueue_style('sitefuse-child', get_stylesheet_directory_uri() . '/dist/tailwind.css', ['sitefuse-parent'], $ver);

            $website_json = ABSPATH . 'website.json';
            if (file_exists($website_json)) {
              $cfg = json_decode(file_get_contents($website_json), true);
              if (is_array($cfg) && isset($cfg['typography'])) {
                $families = [];
                foreach (['headingFont','bodyFont','accentFont'] as $k) {
                  if (!empty($cfg['typography'][$k]) && is_string($cfg['typography'][$k])) {
                    $fam = trim(explode(',', $cfg['typography'][$k])[0]);
                    if ($fam !== '') $families[$fam] = true;
                  }
                }
                if ($families) {
                  $qs = implode('&family=', array_map(function($f){ return str_replace(' ','+',$f).':wght@400;600;700;800'; }, array_keys($families)));
                  wp_enqueue_style('sitefuse-fonts', 'https://fonts.googleapis.com/css2?family='.$qs.'&display=swap', [], null);
                }
              }
            }

            wp_enqueue_script('sitefuse-js', get_stylesheet_directory_uri() . '/assets/js/theme.js', [], $ver, true);
          });

          add_action('after_setup_theme', function () {
            add_theme_support('post-thumbnails');
            add_theme_support('custom-logo');
            add_theme_support('title-tag');
            add_theme_support('html5', ['search-form', 'comment-form', 'comment-list', 'gallery', 'caption']);
            register_nav_menus(['primary' => 'Primary Navigation', 'footer' => 'Footer Navigation']);
          });

          add_filter('nav_menu_link_attributes', function($atts, $item, $args){
            if (isset($args->theme_location) && in_array($args->theme_location, ['primary','footer'], true)) {
              $atts['class'] = trim(($atts['class'] ?? '') . ' nav-link');
            }
            return $atts;
          }, 10, 3);
          PHP

          cat > "$THEME_DIR/assets/css/tailwind.css" <<CSS
          @tailwind base;
          @tailwind components;
          @tailwind utilities;

          @layer base {
            :root { --color-brand:${BRAND}; --color-accent:${ACCENT}; --color-cream:#fefaf6; --color-dark:#1f2937; --color-gray:#6b7280; }
            html { scroll-behavior: smooth; } body { line-height: 1.7; }
          }

          @layer components {
            .container { width: 100%; margin-inline: auto; padding-inline: 1rem; max-width: 80rem; }
            .btn { display: inline-flex; align-items: center; justify-content: center; border-radius: .75rem; padding: .875rem 2rem; font-weight: 600; transition: all .3s; text-decoration: none; }
            .btn-primary { background: linear-gradient(135deg, var(--color-brand), var(--color-accent)); color: #fff; box-shadow: 0 4px 15px rgba(0,0,0,.1); }
            .btn-primary:hover { transform: translateY(-2px); box-shadow: 0 8px 25px rgba(0,0,0,.15); }
            .card { background: #fff; border-radius: 1rem; box-shadow: 0 20px 40px rgba(0,0,0,.08); padding: 2.5rem; border: 1px solid rgb(241 245 249); transition: all .3s; }
            .section-title { font-size: 2.5rem; font-weight: 800; letter-spacing: -0.025em; line-height: 1.2; margin-bottom: 1rem; }
            .nav-link { color: var(--color-dark); font-weight: 500; text-decoration: none; padding: .5rem 1rem; border-radius: .5rem; transition: all .3s; }
            .nav-link:hover { background: var(--color-cream); color: var(--color-brand); }
            .footer-section { background: var(--color-dark); color: rgb(226 232 240); }
            .animate-fade-in { animation: fadeIn .8s ease-out; }
            @keyframes fadeIn { from { opacity: 0; transform: translateY(20px); } to { opacity: 1; transform: translateY(0); } }
          }
          CSS

          cat > "$THEME_DIR/header.php" <<'PHP'
          <!doctype html>
          <html <?php language_attributes(); ?>>
          <head>
            <meta charset="<?php bloginfo('charset'); ?>">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <?php wp_head(); ?>
          </head>
          <body <?php body_class('font-sans antialiased'); ?> style="background-color: var(--color-cream); color: var(--color-dark);">
          <a class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 btn btn-primary z-50" href="#main">Skip to content</a>
          <header class="sticky top-0 z-40" style="background: rgba(255,255,255,.95); backdrop-filter: blur(12px); border-bottom: 1px solid #e5e7eb;">
            <div class="container">
              <div class="flex items-center justify-between h-20">
                <a href="<?php echo esc_url(home_url('/')); ?>" class="flex items-center space-x-2">
                  <?php if (has_custom_logo()) { the_custom_logo(); } else { ?>
                    <span style="font-size:1.5rem; font-weight:800; letter-spacing:-.025em; color:var(--color-brand);"><?php bloginfo('name'); ?></span>
                  <?php } ?>
                </a>
                <nav class="hidden lg:flex items-center space-x-1">
                  <?php wp_nav_menu(['theme_location'=>'primary','menu_class'=>'flex items-center space-x-1','container'=>false,'fallback_cb'=>'__return_empty_string']); ?>
                </nav>
                <button class="lg:hidden mobile-menu-btn p-2 rounded-lg" style="color: var(--color-brand);">
                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                  </svg>
                </button>
              </div>
              <div class="mobile-menu hidden lg:hidden py-4 border-t border-gray-200">
                <?php wp_nav_menu(['theme_location'=>'primary','menu_class'=>'flex flex-col space-y-2','container'=>false,'fallback_cb'=>'__return_empty_string']); ?>
              </div>
            </div>
          </header>
          PHP

          cat > "$THEME_DIR/footer.php" <<'PHP'
          <footer class="footer-section mt-20">
            <div class="container py-16">
              <div class="grid md:grid-cols-4 gap-8">
                <div class="md:col-span-2">
                  <h3 class="text-xl font-bold mb-4" style="color: var(--color-accent);"><?php bloginfo('name'); ?></h3>
                  <p class="text-gray-300 mb-6 max-w-md"><?php bloginfo('description'); ?></p>
                </div>
                <div>
                  <h4 class="text-lg font-semibold mb-4">Quick Links</h4>
                  <?php wp_nav_menu(['theme_location'=>'footer','menu_class'=>'space-y-2','container'=>false,'fallback_cb'=>'__return_empty_string']); ?>
                </div>
                <div>
                  <h4 class="text-lg font-semibold mb-4">Contact Info</h4>
                  <div class="space-y-2 text-gray-300">
                    <p>📞 (555) 123-4567</p>
                    <p>✉️ hello@<?php echo str_replace(' ', '', strtolower(get_bloginfo('name'))); ?>.com</p>
                    <p>📍 123 Business St, City, State 12345</p>
                  </div>
                </div>
              </div>
            </div>
            <div class="border-t border-gray-700">
              <div class="container py-6">
                <div class="flex flex-col md:flex-row justify-between items-center text-gray-400 text-sm">
                  <p>© <?php echo date('Y'); ?> <?php bloginfo('name'); ?>. All rights reserved.</p>
                  <p>Powered by <a href="https://wordpress.org" class="hover:text-white">WordPress</a> and <span style="color: var(--color-accent);">SiteFuse</span></p>
                </div>
              </div>
            </div>
          </footer>
          <?php wp_footer(); ?>
          </body>
          </html>
          PHP

          cat > "$THEME_DIR/front-page.php" <<'PHP'
          <?php
          get_header();

          $data = [];
          $path = ABSPATH . 'website.json';
          if (file_exists($path)) {
            $json = file_get_contents($path);
            $decoded = json_decode($json, true);
            if (is_array($decoded)) { $data = $decoded; }
          }

          $heroHtml = $data['heroSection']['customHTML'] ?? '';
          $heroImg  = $data['heroSection']['heroImage'] ?? get_stylesheet_directory_uri() . '/assets/img/hero.jpg';

          $echo_wrapped = function(string $html) {
            if ($html === '') return;
            if (strpos($html, 'container') !== false) { echo $html; return; }
            echo '<section class="py-16"><div class="container">'.$html.'</div></section>';
          };
          ?>
          <main id="main">
            <section class="hero-section relative">
              <img src="<?php echo esc_url($heroImg); ?>" alt="" class="absolute inset-0 w-full h-full object-cover opacity-40" />
              <div class="relative container py-24 md:py-40 text-center text-white">
                <?php
                  if ($heroHtml) {
                    echo $heroHtml;
                  } else {
                    echo '<h1 class="text-4xl md:text-6xl font-extrabold">'. esc_html(get_bloginfo('name')) .'</h1>';
                    echo '<p class="mt-4 text-xl">'. esc_html(get_bloginfo('description')) .'</p>';
                  }
                ?>
              </div>
            </section>

            <?php
              if (!empty($data['customSections']) && is_array($data['customSections'])) {
                foreach ($data['customSections'] as $section) {
                  $html = isset($section['html']) && is_string($section['html']) ? $section['html'] : '';
                  $echo_wrapped($html);
                }
              }

              if (empty($data['heroSection']) && !empty($data['homepageLayout']) && is_string($data['homepageLayout'])) {
                echo $data['homepageLayout'];
              }
            ?>
          </main>
          <?php get_footer(); ?>
          PHP

          cat > "$THEME_DIR/index.php" <<'PHP'
          <?php get_header(); ?>
          <main id="main" class="container py-20">
            <?php if (have_posts()) : while (have_posts()) : the_post(); the_content(); endwhile; endif; ?>
          </main>
          <?php get_footer(); ?>
          PHP

          cat > "$THEME_DIR/assets/js/theme.js" <<'JS'
          document.addEventListener('DOMContentLoaded', function() {
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
              anchor.addEventListener('click', function (e) {
                const href = this.getAttribute('href');
                if (href && href.length > 1) {
                  e.preventDefault();
                  const target = document.querySelector(href);
                  if (target) target.scrollIntoView({ behavior: 'smooth', block: 'start' });
                }
              });
            });

            const mobileMenuBtn = document.querySelector('.mobile-menu-btn');
            const mobileMenu = document.querySelector('.mobile-menu');
            if (mobileMenuBtn && mobileMenu) {
              mobileMenuBtn.addEventListener('click', () => mobileMenu.classList.toggle('hidden'));
            }

            const observer = new IntersectionObserver((entries) => {
              entries.forEach(entry => { if (entry.isIntersecting) entry.target.classList.add('animate-fade-in'); });
            }, { threshold: 0.1, rootMargin: '0px 0px -50px 0px' });

            document.querySelectorAll('.card, .service-item, .testimonial-card').forEach(el => observer.observe(el));
          });
          JS

          if [ ! -s "$THEME_DIR/assets/img/hero.jpg" ]; then
            curl -fsSL "${HERO}" -o "$THEME_DIR/assets/img/hero.jpg" --max-time 20 || \
            curl -fsSL "https://images.unsplash.com/photo-1497366216548-37526070297c?w=1200&h=800&fit=crop" -o "$THEME_DIR/assets/img/hero.jpg" --max-time 20 || true;
          fi

      #####################################################################
      # Extract AI HTML and Tailwind config
      #####################################################################
      - name: Extract AI HTML and write Tailwind config
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        run: |
          set -euo pipefail;
          echo "[tailwind] extracting AI HTML across passes";
          THEME_DIR="$GITHUB_WORKSPACE/${SLUG}-child";
          mkdir -p "$THEME_DIR/templates";
          {
            jq -r '[.heroSection.customHTML, (.customSections[]?.html), .homepageLayout, .servicesPageLayout] | map(select(. != null)) | join("\n")' website-step1.json || true;
            jq -r '[.heroSection.customHTML, (.customSections[]?.html), .homepageLayout, .servicesPageLayout] | map(select(. != null)) | join("\n")' website-step2.json || true;
            jq -r '[.heroSection.customHTML, (.customSections[]?.html), .homepageLayout, .servicesPageLayout] | map(select(. != null)) | join("\n")' website-step3.json || true;
            jq -r '[.heroSection.customHTML, (.customSections[]?.html), .homepageLayout, .servicesPageLayout] | map(select(. != null)) | join("\n")' website.json || true;
          } > "$THEME_DIR/templates/ai.html";

          echo "[tailwind] writing config with regex safelist";
          cat > "$THEME_DIR/tailwind.config.js" <<'CONFIG'
          module.exports = {
            content: ['./**/*.php','./templates/**/*.html','../website.json'],
            safelist: [
              { pattern: /^(sm:|md:|lg:|xl:|2xl:)?(container|prose|grid|flex|items|justify|content|gap-[0-9]+|space-[xy]-[0-9]+|p[trblxy]?-[0-9]+|m[trblxy]?-[0-9]+|w-.*|h-.*|max-w-.*|min-h-.*|rounded.*|shadow.*|bg-.*|from-.*|via-.*|to-.*|text-.*|leading-.*|tracking-.*|font-.*|border-.*|ring-.*|col-span-.*|row-span-.*)$/ }
            ],
            theme: { extend: {} },
            plugins: [],
          }
          CONFIG

      #####################################################################
      # Build Tailwind CSS
      #####################################################################
      - name: Build Tailwind CSS
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        run: |
          set -euo pipefail;
          echo "[build] tailwind css";
          THEME_DIR="$GITHUB_WORKSPACE/${SLUG}-child";
          curl -sL https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-x64 -o tailwindcss;
          chmod +x tailwindcss;
          ./tailwindcss -c "$THEME_DIR/tailwind.config.js" -i "$THEME_DIR/assets/css/tailwind.css" -o "$THEME_DIR/dist/tailwind.css" --minify;
          test -s "$THEME_DIR/dist/tailwind.css" || { echo "Tailwind output missing"; exit 1; };

      #####################################################################
      # Commit artefacts
      #####################################################################
      - name: Commit generated theme back to repo
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        run: |
          set -euo pipefail;
          echo "[commit] committing child theme and website.json";
          mkdir -p child-themes;
          rm -rf "child-themes/${SLUG}-child";
          mv "$GITHUB_WORKSPACE/${SLUG}-child" "child-themes/${SLUG}-child";
          git config user.name  "sitefuse-bot";
          git config user.email "bot@users.noreply.github.com";
          git add "child-themes/${SLUG}-child" website.json website-step1.json website-step2.json website-step3.json image-prompts.json;
          git commit -m "feat: ${SLUG}-child generated with multi-pass AI, images, hardened Tailwind" || echo "No changes to commit";
          git push || echo "Push skipped";

      #####################################################################
      # Deploy to Cloudways
      #####################################################################
      - name: Deploy parent theme to Cloudways
        run: |
          set -euo pipefail;
          echo "[deploy] parent theme";
          PARENT_DEST="$APP_PATH/wp-content/themes/sitefuse-base";
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "mkdir -p '$PARENT_DEST'";
          rsync -avz -e "ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no"
            "$GITHUB_WORKSPACE/sitefuse-base/"
            "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$PARENT_DEST/";
          echo "parent deployed to: $PARENT_DEST/";

      - name: Deploy child theme and website.json to Cloudways
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        run: |
          set -euo pipefail;
          echo "[deploy] child theme";
          THEME_DIR="$GITHUB_WORKSPACE/child-themes/${SLUG}-child";
          DEST="$APP_PATH/wp-content/themes/${SLUG}-child";
          if [ -d "$THEME_DIR" ]; then
            ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "mkdir -p '$DEST'";
            rsync -avz --delete -e "ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no" "$THEME_DIR/" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$DEST/";
            rsync -avz -e "ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no" "$GITHUB_WORKSPACE/website.json" "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/";
            echo "child deployed to: $DEST/";
          else
            echo "theme directory not found locally";
            exit 1;
          fi

      #####################################################################
      # WordPress setup, idempotent
      #####################################################################
      - name: Create WordPress pages and content
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
          NAME: ${{ steps.merge.outputs.name }}
          TAGLINE: ${{ steps.merge.outputs.tagline }}
        run: |
          set -euo pipefail;
          echo "[wp] applying settings and pages";
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "cd '$APP_PATH' && which wp";

          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "cd '$APP_PATH' && wp option update blogdescription '$TAGLINE' --allow-root";
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "cd '$APP_PATH' && wp option update blogname '$NAME' --allow-root";

          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "cd '$APP_PATH' && wp theme activate '"${SLUG}-child"' --allow-root || true";

          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" "cd '$APP_PATH' &&
            if [ \$(wp post list --post_type=page --post_title='About' --format=count --allow-root) -eq 0 ]; then
              wp post create --post_type=page --post_title='About' --post_name='about' --post_status=publish --post_content='Learn more about our story and values.' --allow-root;
            fi
            if [ \$(wp post list --post_type=page --post_title='Services' --format=count --allow-root) -eq 0 ]; then
              wp post create --post_type=page --post_title='Services' --post_name='services' --post_status=publish --post_content='Discover our comprehensive services.' --allow-root;
            fi
            if [ \$(wp post list --post_type=page --post_title='Contact' --format=count --allow-root) -eq 0 ]; then
              wp post create --post_type=page --post_title='Contact' --post_name='contact' --post_status=publish --post_content='Get in touch with us today.' --allow-root;
            fi
            if [ \$(wp post list --post_type=page --post_name=home --format=count --allow-root) -eq 0 ]; then
              HOME_ID=\$(wp post create --post_type=page --post_title='Home' --post_name='home' --post_status=publish --post_content='Welcome to our homepage' --porcelain --allow-root);
              wp option update show_on_front page --allow-root;
              wp option update page_on_front \$HOME_ID --allow-root;
            else
              HOME_ID=\$(wp post list --post_type=page --name=home --field=ID --allow-root | head -1);
              wp option update show_on_front page --allow-root;
              wp option update page_on_front \$HOME_ID --allow-root;
            fi

            wp menu delete primary-menu --allow-root 2>/dev/null || true;
            wp menu create 'Primary Menu' --allow-root 2>/dev/null || true;
            wp menu item add-post 'Primary Menu' \$(wp post list --post_type=page --name=home --field=ID --allow-root | head -1) --title='Home' --allow-root 2>/dev/null || true;
            wp menu item add-post 'Primary Menu' \$(wp post list --post_type=page --name=about --field=ID --allow-root | head -1) --title='About' --allow-root 2>/dev/null || true;
            wp menu item add-post 'Primary Menu' \$(wp post list --post_type=page --name=services --field=ID --allow-root | head -1) --title='Services' --allow-root 2>/dev/null || true;
            wp menu item add-post 'Primary Menu' \$(wp post list --post_type=page --name=contact --field=ID --allow-root | head -1) --title='Contact' --allow-root 2>/dev/null || true;
            wp menu location assign 'Primary Menu' primary --allow-root 2>/dev/null || true
          ";
          echo "done";