name: Enhanced Child Theme from Prompt

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Describe your website, for example "Modern yoga studio with earth tones and mindfulness focus"'
        required: true
        type: string
      industry:
        description: 'Industry type'
        required: false
        type: choice
        options:
          - 'auto-detect'
          - 'restaurant'
          - 'bakery'
          - 'yoga-studio'
          - 'law-firm'
          - 'photography'
          - 'consulting'
          - 'medical'
          - 'retail'
          - 'real-estate'
          - 'technology'
        default: 'auto-detect'
      generate_images:
        description: 'Generate AI images'
        required: false
        default: true
        type: boolean

permissions:
  contents: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest

    env:
      CLOUDWAYS_HOST: ${{ secrets.CLOUDWAYS_HOST }}
      CLOUDWAYS_USER: ${{ secrets.CLOUDWAYS_USER }}
      CLOUDWAYS_KEY:  ${{ secrets.CLOUDWAYS_KEY }}
      APP_PATH:       ${{ secrets.APP_PATH }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: gsq480/SiteFuse
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
          persist-credentials: true

      - name: SSH setup
        shell: bash
        run: |
          set -euo pipefail
          echo "[setup] preparing ssh"
          mkdir -p ~/.ssh
          chmod 700 ~/.ssh
          printf '%s\n' "$CLOUDWAYS_KEY" > ~/.ssh/id_rsa_cloudways
          chmod 600 ~/.ssh/id_rsa_cloudways
          ssh-keyscan -H "$CLOUDWAYS_HOST" >> ~/.ssh/known_hosts

      - name: AI pass 1 - Enhanced website structure
        shell: bash
        run: |
          set -euo pipefail
          [ -n "${OPENAI_API_KEY:-}" ] || { echo "OPENAI_API_KEY is empty"; exit 1; }
          echo "[ai1] generating comprehensive website structure with enhanced prompt"
          
          # Capture inputs
          PROMPT="${{ github.event.inputs.prompt }}"
          INDUSTRY="${{ github.event.inputs.industry }}"
          
          echo "[ai1] Processing prompt: ${PROMPT:0:100}..."
          echo "[ai1] Industry: $INDUSTRY"
          
          # Build payload using jq
          jq -n \
            --arg prompt "$PROMPT" \
            --arg industry "$INDUSTRY" \
            --arg sys 'You are a professional web designer. Return valid JSON with this structure: {"slug":"kebab-case","name":"Business Name","tagline":"tagline","industry":"industry","colorPalette":{"primary":"#hex","secondary":"#hex","accent":"#hex"},"typography":{"headingFont":"font","bodyFont":"font"},"heroSection":{"customHTML":"html","heroImage":"url"},"customSections":[{"title":"title","html":"html"}]}' \
            --arg usr "Create website JSON for: ${PROMPT}. Industry: ${INDUSTRY}. Extract exact business name, use appropriate colors, create 3-5 sections." \
            '{
              model: "gpt-4o",
              response_format: {type: "json_object"},
              temperature: 0.3,
              max_tokens: 4000,
              messages: [
                {role:"system", content:$sys},
                {role:"user", content:$usr}
              ]
            }' > /tmp/payload.json
          
          echo "[ai1] calling OpenAI API..."
          HTTP=$(curl -sS -w "\n%{http_code}" "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload.json)
          
          RESP="$(printf "%s" "$HTTP" | sed '$d')"
          CODE="$(printf "%s" "$HTTP" | tail -n1)"
          printf '%s' "$RESP" > ai1-response.json
          
          if [ "$CODE" != "200" ]; then
            echo "[ai1] API error code $CODE"
            jq -r '.error.message // "Unknown API error"' ai1-response.json || echo "Failed to parse error"
            exit 1
          fi
          
          if jq -e '.choices[0].message.content' ai1-response.json >/dev/null 2>&1; then
            echo "[ai1] extracting AI content..."
            jq -r '.choices[0].message.content' ai1-response.json > website-step1.json
            if ! jq empty website-step1.json 2>/dev/null; then
              echo "[ai1] invalid JSON, using fallback"
              printf '%s\n' '{"slug":"business-site","name":"Your Business","tagline":"Professional services","industry":"business","colorPalette":{"primary":"#2563eb","secondary":"#3b82f6","accent":"#1d4ed8"},"typography":{"headingFont":"Inter","bodyFont":"Inter"},"heroSection":{"customHTML":"<div>Welcome</div>","heroImage":"https://images.unsplash.com/photo-1497366216548-37526070297c"},"customSections":[{"title":"About","html":"<div>About Us</div>"}]}' > website-step1.json
            fi
          else
            echo "[ai1] no AI content, using fallback"
            printf '%s\n' '{"slug":"business-site","name":"Your Business","tagline":"Professional services","industry":"business","colorPalette":{"primary":"#2563eb","secondary":"#3b82f6","accent":"#1d4ed8"},"typography":{"headingFont":"Inter","bodyFont":"Inter"},"heroSection":{"customHTML":"<div>Welcome</div>","heroImage":"https://images.unsplash.com/photo-1497366216548-37526070297c"},"customSections":[{"title":"About","html":"<div>About Us</div>"}]}' > website-step1.json
          fi

      - name: AI pass 2 - Content enhancement
        shell: bash
        run: |
          set -euo pipefail
          echo "[ai2] enhancing content"
          
          [ -f website-step1.json ] || { printf '{}' > website-step2.json; exit 0; }
          
          if ! jq empty website-step1.json 2>/dev/null; then
            cp website-step1.json website-step2.json
            exit 0
          fi
          
          jq -n \
            --rawfile base website-step1.json \
            --arg ctx "${{ github.event.inputs.prompt }}" \
            '{
              model: "gpt-4o",
              response_format: {type:"json_object"},
              temperature: 0.4,
              max_tokens: 4000,
              messages: [
                {role:"system", content:"Enhance the website JSON with better UX and industry-specific sections."},
                {role:"user", content:("Context: " + $ctx + "\n\nEnhance:\n" + $base)}
              ]
            }' > /tmp/payload2.json
          
          HTTP=$(curl -sS -w "\n%{http_code}" "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload2.json)
          
          RESP="$(printf "%s" "$HTTP" | sed '$d')"
          CODE="$(printf "%s" "$HTTP" | tail -n1)"
          
          if [ "$CODE" = "200" ]; then
            printf '%s' "$RESP" | jq -r '.choices[0].message.content // "{}"' > website-step2.json
            if ! jq empty website-step2.json 2>/dev/null; then
              cp website-step1.json website-step2.json
            fi
          else
            cp website-step1.json website-step2.json
          fi

      - name: AI pass 3 - Technical optimisation
        shell: bash
        run: |
          set -euo pipefail
          echo "[ai3] preserving content"
          
          if [ -f website-step2.json ] && jq empty website-step2.json 2>/dev/null; then
            cp website-step2.json website-step3.json
          elif [ -f website-step1.json ]; then
            cp website-step1.json website-step3.json
          else
            printf '{}' > website-step3.json
          fi

      - name: AI pass 4 - Image prompts
        shell: bash
        run: |
          set -euo pipefail
          echo "[ai4] generating image prompts"
          
          [ -f website-step3.json ] || { printf '{"images":[]}' > image-prompts.json; exit 0; }
          
          jq -n \
            --rawfile content website-step3.json \
            '{
              model: "gpt-4o-mini",
              response_format: {"type": "json_object"},
              messages: [
                {role:"system", content:"Create DALL-E prompts. Return: {\"images\":[{\"key\":\"hero\",\"prompt\":\"prompt\"}]}"},
                {role:"user", content:("Create image prompts for:\n" + $content)}
              ]
            }' > /tmp/payload4.json
          
          HTTP=$(curl -sS -w "\n%{http_code}" "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer ${OPENAI_API_KEY}" \
            -H "Content-Type: application/json" \
            -d @/tmp/payload4.json)
          
          if [ "$(printf "%s" "$HTTP" | tail -n1)" = "200" ]; then
            printf "%s" "$HTTP" | sed '$d' | jq -r '.choices[0].message.content // "{\"images\":[]}"' > image-prompts.json
          else
            printf '{"images":[]}' > image-prompts.json
          fi

      - name: Smart merge and variable extraction
        id: merge
        shell: bash
        run: |
          set -euo pipefail
          echo "[merge] merging AI passes"
          
          # Create fallback
          printf '%s\n' '{"slug":"new-site","name":"New Site","tagline":"Welcome","industry":"business","colorPalette":{"primary":"#2563eb","secondary":"#3b82f6","accent":"#1d4ed8"},"typography":{"headingFont":"Inter","bodyFont":"Inter"},"heroSection":{"customHTML":"<div>Welcome</div>","heroImage":"https://images.unsplash.com/photo-1497366216548-37526070297c"},"customSections":[{"title":"About","html":"<div>About</div>"}]}' > fallback.json
          
          # Merge files
          for f in website-step1.json website-step2.json website-step3.json; do
            [ -f "$f" ] && jq empty "$f" 2>/dev/null && cp "$f" website.json && break
          done
          [ -f website.json ] || cp fallback.json website.json
          
          # Extract variables
          normalize_color() {
            local c="${1:-#2563eb}"
            c="${c,,}"; c="${c#\#}"
            case "${#c}" in
              3) printf '#%s%s%s%s%s%s' "${c:0:1}" "${c:0:1}" "${c:1:1}" "${c:1:1}" "${c:2:1}" "${c:2:1}";;
              6) printf '#%s' "$c";;
              *) printf '#2563eb';;
            esac
          }
          
          SLUG=$(jq -r '.slug // "new-site"' website.json)
          NAME=$(jq -r '.name // "New Site"' website.json)
          TAGLINE=$(jq -r '.tagline // "Welcome"' website.json)
          BRAND=$(normalize_color "$(jq -r '.colorPalette.primary // "#2563eb"' website.json)")
          ACCENT=$(normalize_color "$(jq -r '.colorPalette.accent // "#3b82f6"' website.json)")
          HERO=$(jq -r '.heroSection.heroImage // "https://images.unsplash.com/photo-1497366216548-37526070297c"' website.json)
          
          {
            echo "slug=$SLUG"
            echo "name=$NAME"
            echo "tagline=$TAGLINE"
            echo "brand=$BRAND"
            echo "accent=$ACCENT"
            echo "hero=$HERO"
          } >> "$GITHUB_OUTPUT"
          
          echo "[merge] Extracted: SLUG=$SLUG, NAME=$NAME"

      - name: Generate AI images
        if: ${{ github.event.inputs.generate_images == 'true' }}
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[images] preparing assets"
          mkdir -p "${SLUG}-assets/img"
          
          # Download fallback hero image
          curl -fsSL "https://images.unsplash.com/photo-1504384308090-c894fdcc538d?w=1600&h=900&fit=crop" \
            -o "${SLUG}-assets/img/hero.jpg" --max-time 30 || true

      - name: Scaffold enhanced theme
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
          NAME: ${{ steps.merge.outputs.name }}
          TAGLINE: ${{ steps.merge.outputs.tagline }}
          BRAND: ${{ steps.merge.outputs.brand }}
          ACCENT: ${{ steps.merge.outputs.accent }}
          HERO: ${{ steps.merge.outputs.hero }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[scaffold] creating theme structure"
          
          THEME_DIR="${SLUG}-child"
          mkdir -p "$THEME_DIR/assets/css" "$THEME_DIR/assets/js" "$THEME_DIR/assets/img" "$THEME_DIR/dist"
          
          # Copy hero image if exists
          [ -f "${SLUG}-assets/img/hero.jpg" ] && cp "${SLUG}-assets/img/hero.jpg" "$THEME_DIR/assets/img/hero.jpg"
          
          # Create theme files using printf to avoid heredoc issues
          printf '/*\nTheme Name: %s\nDescription: AI-generated website\nTemplate: sitefuse-base\nVersion: 1.0.0\n*/\n' "$NAME" > "$THEME_DIR/style.css"
          
          # Create functions.php
          printf '<?php\nadd_action("wp_enqueue_scripts", function() {\n' > "$THEME_DIR/functions.php"
          printf '  wp_enqueue_style("parent", get_template_directory_uri()."/dist/tailwind.css");\n' >> "$THEME_DIR/functions.php"
          printf '  wp_enqueue_style("child", get_stylesheet_directory_uri()."/dist/tailwind.css");\n' >> "$THEME_DIR/functions.php"
          printf '});\n' >> "$THEME_DIR/functions.php"
          
          # Create minimal CSS
          printf ':root{--brand:%s;--accent:%s;}\n' "$BRAND" "$ACCENT" > "$THEME_DIR/dist/tailwind.css"
          printf 'body{font-family:system-ui,sans-serif;}\n' >> "$THEME_DIR/dist/tailwind.css"
          printf '.container{max-width:1280px;margin:0 auto;padding:0 1rem;}\n' >> "$THEME_DIR/dist/tailwind.css"
          
          # Create index.php
          printf '<?php get_header(); ?>\n' > "$THEME_DIR/index.php"
          printf '<main class="container py-20">\n' >> "$THEME_DIR/index.php"
          printf '<?php if(have_posts()):while(have_posts()):the_post();the_content();endwhile;endif; ?>\n' >> "$THEME_DIR/index.php"
          printf '</main>\n<?php get_footer(); ?>\n' >> "$THEME_DIR/index.php"
          
          # Create header.php
          printf '<!DOCTYPE html><html <?php language_attributes(); ?>>\n' > "$THEME_DIR/header.php"
          printf '<head><meta charset="<?php bloginfo("charset"); ?>">\n' >> "$THEME_DIR/header.php"
          printf '<meta name="viewport" content="width=device-width,initial-scale=1">\n' >> "$THEME_DIR/header.php"
          printf '<?php wp_head(); ?></head>\n' >> "$THEME_DIR/header.php"
          printf '<body <?php body_class(); ?>>\n' >> "$THEME_DIR/header.php"
          printf '<header class="container py-4"><h1><?php bloginfo("name"); ?></h1></header>\n' >> "$THEME_DIR/header.php"
          
          # Create footer.php
          printf '<footer class="container py-8 mt-20">\n' > "$THEME_DIR/footer.php"
          printf '<p>&copy; <?php echo date("Y"); ?> <?php bloginfo("name"); ?></p>\n' >> "$THEME_DIR/footer.php"
          printf '</footer>\n<?php wp_footer(); ?></body></html>\n' >> "$THEME_DIR/footer.php"
          
          # Create front-page.php
          printf '<?php get_header(); ?>\n' > "$THEME_DIR/front-page.php"
          printf '<main class="container">\n' >> "$THEME_DIR/front-page.php"
          printf '<h1>%s</h1>\n' "$NAME" >> "$THEME_DIR/front-page.php"
          printf '<p>%s</p>\n' "$TAGLINE" >> "$THEME_DIR/front-page.php"
          printf '</main>\n<?php get_footer(); ?>\n' >> "$THEME_DIR/front-page.php"

      - name: Commit theme
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
          NAME: ${{ steps.merge.outputs.name }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[commit] preparing theme commit"
          
          mkdir -p child-themes
          rm -rf "child-themes/${SLUG}-child"
          mv "${SLUG}-child" "child-themes/${SLUG}-child"
          
          git config user.name "SiteFuse AI Bot"
          git config user.email "ai-bot@sitefuse.com"
          
          git add "child-themes/${SLUG}-child" website.json || true
          git commit -m "feat: AI theme '${NAME}'" || echo "No changes"
          git push origin main || echo "Push skipped"

      - name: Deploy to Cloudways
        env:
          SLUG: ${{ steps.merge.outputs.slug }}
          NAME: ${{ steps.merge.outputs.name }}
          TAGLINE: ${{ steps.merge.outputs.tagline }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[deploy] deploying to Cloudways"
          
          # Deploy parent theme
          PARENT_DEST="$APP_PATH/wp-content/themes/sitefuse-base"
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "mkdir -p '$PARENT_DEST'"
          
          if [ -d "sitefuse-base" ]; then
            rsync -avz --delete \
              -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
              "sitefuse-base/" \
              "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$PARENT_DEST/"
          fi
          
          # Deploy child theme
          THEME_DEST="$APP_PATH/wp-content/themes/${SLUG}-child"
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "mkdir -p '$THEME_DEST'"
          
          rsync -avz --delete \
            -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
            "child-themes/${SLUG}-child/" \
            "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$THEME_DEST/"
          
          # Copy website.json
          rsync -avz \
            -e 'ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no' \
            "website.json" \
            "$CLOUDWAYS_USER@$CLOUDWAYS_HOST:$APP_PATH/"
          
          # Configure WordPress
          ssh -i ~/.ssh/id_rsa_cloudways -o StrictHostKeyChecking=no "$CLOUDWAYS_USER@$CLOUDWAYS_HOST" \
            "cd '$APP_PATH' && \
            wp option update blogname '$NAME' --allow-root && \
            wp option update blogdescription '$TAGLINE' --allow-root && \
            wp theme activate '${SLUG}-child' --allow-root && \
            wp rewrite flush --allow-root"
          
          echo "Deployment completed: $NAME"
