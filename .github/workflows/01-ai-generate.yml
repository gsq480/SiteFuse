# .github/workflows/01-ai-generate.yml
name: Generate Website Configuration

on:
  workflow_dispatch:
    inputs:
      prompt:
        description: 'Describe your website'
        required: true
        type: string
      industry:
        description: 'Industry type'
        required: false
        type: string
        default: 'auto-detect'
      generate_images:
        description: 'Generate AI images'
        required: false
        type: boolean
        default: false

  workflow_call:
    inputs:
      prompt:
        required: true
        type: string
      industry:
        required: false
        type: string
        default: 'auto-detect'
      generate_images:
        required: false
        type: boolean
        default: false
    outputs:
      config_artifact:
        description: "Generated website configuration artifact name"
        value: website-config-${{ github.run_id }}

jobs:
  generate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Generate website configuration
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -euo pipefail

          echo "Prompt: ${{ inputs.prompt }}"
          echo "Industry: ${{ inputs.industry }}"
          echo "Generate images: ${{ inputs.generate_images }}"

          if [ -z "${OPENAI_API_KEY:-}" ]; then
            echo "ERROR: OPENAI_API_KEY is not set"
            exit 1
          fi

          cat > system_prompt.txt << 'EOF'
          You are a senior brand, UX and content designer. Return STRICT JSON, no prose.

          Schema:
          {
            "slug": "kebab-case-name",
            "name": "Business Name",
            "tagline": "Short promise",
            "industry": "one-of: restaurant, bakery, yoga-studio, law-firm, photography, consulting, medical, retail, real-estate, technology",
            "style": {
              "recipe": "one-of: minimal, editorial, brutalist, elegant, playful, tech",
              "variant": "a,b,c",
              "shapes": "squircle|angled|soft",
              "radius": 6,
              "elev": "low|med|high"
            },
            "brand": {
              "colors": {"primary":"#hex","secondary":"#hex","accent":"#hex","bg":"#hex","text":"#hex"},
              "fonts": {"heading":"Inter","body":"Inter"}
            },
            "hero": {
              "title":"H1",
              "subtitle":"One-line benefit",
              "cta":{"label":"Primary CTA","href":"#contact"},
              "image":"https://images.unsplash.com/photo-[ID]?w=1600&h=900&fit=crop",
              "overlay": 0.35
            },
            "nav": [{"label":"Home","href":"/"},{"label":"Page","href":"/page"}],
            "pages": [
              {
                "slug":"home",
                "title":"Home",
                "layout":"landing",
                "blocks":[
                  {"type":"hero"},
                  {"type":"features","columns":3,"items":[{"title":"...","text":"..."}, {"title":"...","text":"..."}, {"title":"...","text":"..."}]},
                  {"type":"testimonial","quote":"...","author":"..."},
                  {"type":"cta","text":"...","button":{"label":"...","href":"/contact"}}
                ]
              },
              {
                "slug":"services","title":"Services",
                "blocks":[
                  {"type":"service-cards","items":[{"title":"...","text":"..."},{"title":"...","text":"..."}]}
                ]
              },
              {
                "slug":"about","title":"About",
                "blocks":[{"type":"two-col","title":"Our story","left":"<p>...</p>","right":"<p>...</p>"}]
              },
              {
                "slug":"contact","title":"Contact",
                "blocks":[{"type":"contact-form"}]
              }
            ],
            "media": [{"name":"hero.jpg","url":"https://images.unsplash.com/photo-[ID]?w=1600&h=900&fit=crop"}],
            "seo": {"title":"SEO Title","description":"SEO description","keywords":["a","b","c"]},
            "ecommerce":{"enabled":false}
          }

          Rules:
          - Choose a style.recipe and variant that fit the industry, and vary per request so sites don’t look the same.
          - Use contrasting colours that pass AA for body text on bg.
          - Fonts must be common Google Fonts by family name only.
          - Hero image must use a real Unsplash photo ID as shown.
          - Write short, sensible placeholder copy that matches the business type.
          EOF

          SYSTEM_PROMPT=$(cat system_prompt.txt)
          USER_PROMPT="Create website config for: ${{ inputs.prompt }} Industry: ${{ inputs.industry }}"

          jq -n \
            --arg model "gpt-4o" \
            --arg system_content "$SYSTEM_PROMPT" \
            --arg user_content "$USER_PROMPT" \
            '{
              model: $model,
              response_format: {type: "json_object"},
              temperature: 0.9,
              max_tokens: 4000,
              messages: [
                {role: "system", content: $system_content},
                {role: "user", content: $user_content}
              ]
            }' > payload.json

          echo "Calling OpenAI API..."
          HTTP_CODE=$(curl -w "%{http_code}" -o api_response.json -s \
            -X POST "https://api.openai.com/v1/chat/completions" \
            -H "Authorization: Bearer $OPENAI_API_KEY" \
            -H "Content-Type: application/json" \
            -d @payload.json)

          echo "HTTP Status Code: $HTTP_CODE"

          USE_FALLBACK=false
          if [ "$HTTP_CODE" != "200" ]; then
            echo "API error"
            cat api_response.json || true
            USE_FALLBACK=true
          else
            if jq -e '.choices[0].message.content' api_response.json >/dev/null 2>&1; then
              jq -r '.choices[0].message.content' api_response.json > website.json || USE_FALLBACK=true
              if ! jq empty website.json >/dev/null 2>&1; then
                echo "Model returned invalid JSON"
                USE_FALLBACK=true
              fi
            else
              echo "No content in API response"
              USE_FALLBACK=true
            fi
          fi

          if [ "$USE_FALLBACK" = "true" ]; then
            echo "Using fallback configuration"
            cat > website.json << 'JSON'
          {"slug":"business-site","name":"Your Business","tagline":"Professional services you can trust","industry":"business","brand":{"colors":{"primary":"#2563eb","secondary":"#3b82f6","accent":"#1d4ed8","bg":"#0b1320","text":"#111827"},"fonts":{"heading":"Inter","body":"Inter"}},"hero":{"title":"Your Business","subtitle":"Professional services","cta":{"label":"Get Started","href":"#contact"},"image":"https://images.unsplash.com/photo-1497366216548-37526070297c?w=1600&h=900&fit=crop","overlay":0.35},"pages":[{"slug":"home","title":"Home","layout":"landing","blocks":[{"type":"hero"},{"type":"features","columns":3,"items":[{"title":"Quality","text":"We care a lot."},{"title":"Speed","text":"We move fast."},{"title":"Support","text":"We’re here."}]},{"type":"testimonial","quote":"They’re great!","author":"Happy Client"},{"type":"cta","text":"Ready to go?","button":{"label":"Contact us","href":"/contact"}}]}]}
          JSON
          fi

      - name: Normalise website.json to required schema
        run: |
          set -euo pipefail
          jq -S '
            .slug        //= "business-site" |
            .name        //= "Your Business" |
            .tagline     //= "Professional services you can trust" |
            .brand.colors //= {"primary":"#2563eb","secondary":"#3b82f6","accent":"#1d4ed8","bg":"#0b1320","text":"#111827"} |
            .brand.fonts  //= {"heading":"Inter","body":"Inter"} |
            .hero.overlay //= 0.35 |
            .nav         //= [{"label":"Home","href":"/"},{"label":"About","href":"/about"},{"label":"Services","href":"/services"},{"label":"Contact","href":"/contact"}] |
            .pages       //= [{"slug":"home","title":"Home","layout":"landing","blocks":[{"type":"hero"}]}] |
            .ecommerce   //= {"enabled": false}
          ' website.json > website.normalised.json
          mv website.normalised.json website.json

          echo "Normalised website.json:"
          jq '.' website.json

      - name: Upload configuration
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: website-config-${{ github.run_id }}
          path: website.json
          retention-days: 1
