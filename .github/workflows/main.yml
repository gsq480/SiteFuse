name: Claude Analysis (Stage 1)

on:
  workflow_run:
    workflows: ["Enhanced Child Theme from Prompt"]
    types: [completed]

permissions:
  contents: read
  actions: write

jobs:
  analyze-failure:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest

    env:
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      TARGET_WORKFLOW: .github/workflows/provision-from-prompt.yml
      MAX_ATTEMPTS: "5"

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Configure git identity
        shell: bash
        run: |
          set -euo pipefail
          git config --global user.email "claude-auto-fix@anthropic.com"
          git config --global user.name "Claude Auto-Fix Bot"

      - name: Fetch failing run logs
        shell: bash
        run: |
          set -euo pipefail
          RUN_ID="${{ github.event.workflow_run.id }}"
          mkdir -p .ai-fix logs
          curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/logs" \
            -o logs/failure.zip
          unzip -q logs/failure.zip -d logs || true

      - name: Collect context
        id: ctx
        shell: bash
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          BRANCH="${{ github.event.workflow_run.head_branch }}"
          echo "SHA=$SHA" >> "$GITHUB_OUTPUT"
          echo "BRANCH=$BRANCH" >> "$GITHUB_OUTPUT"

          git fetch --no-tags origin "$SHA"
          git checkout -q "$SHA" || true

          mkdir -p .ai-fix
          cp -f "$TARGET_WORKFLOW" .ai-fix/ 2>/dev/null || true
          find logs -type f -name '*.txt' -exec tail -n 300 {} + > .ai-fix/errors.txt || true

      - name: Determine current attempt count
        id: attempts
        shell: bash
        run: |
          set -euo pipefail
          FIX_BRANCH="ai-fix/${{ steps.ctx.outputs.BRANCH }}"
          CURRENT=0
          # Try to read attempt count from the fix branch if it exists
          if git ls-remote --exit-code --heads origin "$FIX_BRANCH" >/dev/null 2>&1; then
            git fetch --no-tags origin "$FIX_BRANCH":"refs/tmp/ai-fix-read" || true
            if git show "refs/tmp/ai-fix-read:.ai-fix-attempts" >/dev/null 2>&1; then
              CURRENT="$(git show "refs/tmp/ai-fix-read:.ai-fix-attempts" | tr -d '\n' || echo 0)"
            fi
            # cleanup
            git update-ref -d refs/tmp/ai-fix-read || true
          fi
          echo "current=$CURRENT" >> "$GITHUB_OUTPUT"
          echo "limit=${MAX_ATTEMPTS}" >> "$GITHUB_OUTPUT"
          echo "Detected current attempts: $CURRENT of $MAX_ATTEMPTS"

      - name: Stop if attempts exhausted
        if: ${{ steps.attempts.outputs.current != '' && fromJSON(steps.attempts.outputs.current) >= fromJSON(steps.attempts.outputs.limit) }}
        shell: bash
        run: |
          echo "Max attempts (${MAX_ATTEMPTS}) reached. Not analysing again."
          exit 0

      - name: Ask Claude for unified diff
        id: ai
        shell: bash
        run: |
          set -euo pipefail

          WF_BASE="$(basename "$TARGET_WORKFLOW")"
          if [ -f ".ai-fix/$WF_BASE" ]; then
            WORKFLOW_JSON="$(jq -Rs . < ".ai-fix/$WF_BASE")"
          else
            WORKFLOW_JSON="$(printf '' | jq -Rs .)"
          fi
          ERRORS_JSON="$(jq -Rs . < .ai-fix/errors.txt)"

          echo "=== Debug Info ==="
          if [ -n "${CLAUDE_API_KEY:-}" ]; then echo "CLAUDE_API_KEY present: yes"; else echo "CLAUDE_API_KEY present: no"; fi
          echo "Workflow JSON length: $(echo "$WORKFLOW_JSON" | wc -c)"
          echo "Errors JSON length: $(echo "$ERRORS_JSON" | wc -c)"

          USER_CONTENT="Repository: ${{ github.repository }}\nCommit: ${{ github.event.workflow_run.head_sha }}\n\nFailing workflow file content:\n"
          USER_CONTENT="${USER_CONTENT}$(echo "$WORKFLOW_JSON" | jq -r .)"
          USER_CONTENT="${USER_CONTENT}\n\nTail of error logs:\n"
          USER_CONTENT="${USER_CONTENT}$(echo "$ERRORS_JSON" | jq -r .)"
          USER_CONTENT="${USER_CONTENT}\n\nReturn ONLY a valid unified diff (git patch) that fixes the failure with minimal changes."

          jq -n \
            --arg model "claude-sonnet-4-20250514" \
            --argjson max_tokens 4000 \
            --arg system "You are an expert CI engineer. Output ONLY a unified diff patch. Keep changes minimal and syntactically correct. Fix heredoc and EOF issues. Validate jq and curl usage." \
            --arg user_content "$USER_CONTENT" \
            '{
              model: $model,
              max_tokens: $max_tokens,
              system: $system,
              messages: [{ role: "user", content: $user_content }]
            }' > payload.json

          HTTP_CODE=$(curl -w "%{http_code}" -sS https://api.anthropic.com/v1/messages \
            -H "x-api-key: $CLAUDE_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            -o response.json)

          echo "API HTTP Code: $HTTP_CODE"
          if [ "$HTTP_CODE" != "200" ]; then
            echo "=== API Error Response ==="; cat response.json || true; exit 1
          fi

          jq -er '.content[0].text' response.json > ai.diff.raw

          echo "=== Claude Response Preview ==="
          head -n 20 ai.diff.raw || true

          if grep -q '^```diff' ai.diff.raw; then
            sed -n '/^```diff$/,/^```$/p' ai.diff.raw | sed '1d;$d' > ai.diff
          elif grep -q '^diff --git ' ai.diff.raw || grep -q '^--- ' ai.diff.raw; then
            cp ai.diff.raw ai.diff
          else
            grep -A 1000 '^--- ' ai.diff.raw > ai.diff || cp ai.diff.raw ai.diff
          fi

          echo "=== Processed Diff Preview ==="
          head -n 10 ai.diff || true

          if grep -q '^diff --git ' ai.diff || grep -q '^--- ' ai.diff; then
            echo "Valid unified diff detected"
          else
            echo "Invalid diff from Claude"; cat ai.diff.raw || true; exit 1
          fi

          if [ "$(wc -c < ai.diff)" -gt 51200 ]; then
            echo "Proposed diff too large"; exit 1
          fi

      - name: Save analysis results
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p analysis-results
          cp ai.diff analysis-results/fix.patch
          printf '%s' "{
            \"trigger_run_id\": \"${{ github.event.workflow_run.id }}\",
            \"trigger_sha\": \"${{ github.event.workflow_run.head_sha }}\",
            \"trigger_branch\": \"${{ github.event.workflow_run.head_branch }}\",
            \"target_workflow\": \"${TARGET_WORKFLOW}\",
            \"analysis_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"diff_size\": $(wc -c < ai.diff)
          }" > analysis-results/metadata.json

          PREVIEW="$(head -n 20 ai.diff | sed 's/"/\\"/g')"
          {
            echo "# AI Auto-Fix Analysis"
            echo
            echo "**Triggered by:** Failed run ${{ github.event.workflow_run.id }}"
            echo "**Target:** \`${TARGET_WORKFLOW}\`"
            echo "**Branch:** \`${{ github.event.workflow_run.head_branch }}\`"
            echo "**Commit:** \`${{ github.event.workflow_run.head_sha }}\`"
            echo
            echo "## Analysis Summary"
            echo "Claude analysed the workflow failure and generated a fix patch."
            echo
            echo "**Diff Preview:**"
            echo '```diff'
            echo "$PREVIEW"
            echo '```'
          } > analysis-results/summary.md

          ls -la analysis-results/

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: claude-analysis-${{ github.event.workflow_run.id }}
          path: analysis-results/
          retention-days: 7

      - name: Trigger Stage 2 (apply) with PAT
        if: ${{ steps.attempts.outputs.current == '' || fromJSON(steps.attempts.outputs.current) < fromJSON(env.MAX_ATTEMPTS) }}
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        shell: bash
        run: |
          set -euo pipefail
          echo "[stage1] dispatching Stage 2 with PAT"
          API="https://api.github.com/repos/${{ github.repository }}/actions/workflows/claude-apply.yml/dispatches"
          BODY=$(jq -n \
            --arg ref "main" \
            --arg analysis_run_id "${{ github.run_id }}" \
            --arg trigger_run_id "${{ github.event.workflow_run.id }}" \
            --arg target_branch "${{ github.event.workflow_run.head_branch }}" \
            --arg target_sha "${{ github.event.workflow_run.head_sha }}" \
            '{ref:$ref, inputs:{analysis_run_id:$analysis_run_id, trigger_run_id:$trigger_run_id, target_branch:$target_branch, target_sha:$target_sha}}')

          CODE=$(curl -sS -o /tmp/dispatch.out -w "%{http_code}" \
            -X POST \
            -H "Authorization: Bearer ${PAT_TOKEN}" \
            -H "Accept: application/vnd.github+json" \
            -H "Content-Type: application/json" \
            -d "$BODY" \
            "$API")
          echo "Dispatch HTTP code: $CODE"
          if [ "$CODE" -lt 200 ] || [ "$CODE" -ge 300 ]; then
            echo "Dispatch failed, response:"; cat /tmp/dispatch.out || true; exit 1
          fi
          echo "Stage 2 dispatch succeeded."
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/claude-apply.yml/dispatches" \
            -d "{\"ref\":\"main\",\"inputs\":{\"analysis_run_id\":\"${{ github.run_id }}\",\"trigger_run_id\":\"${{ github.event.workflow_run.id }}\",\"target_branch\":\"${{ github.event.workflow_run.head_branch }}\",\"target_sha\":\"${{ github.event.workflow_run.head_sha }}\"}}"
