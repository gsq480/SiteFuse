name: Claude Analysis (Stage 1)

on:
  workflow_run:
    workflows: ["Enhanced Child Theme from Prompt"]
    types: [completed]

permissions:
  contents: read
  actions: write

jobs:
  analyze-failure:
    if: ${{ github.event.workflow_run.conclusion == 'failure' }}
    runs-on: ubuntu-latest

    env:
      CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
      TARGET_WORKFLOW: .github/workflows/provision-from-prompt.yml

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure git identity
        run: |
          git config --global user.email "claude-auto-fix@anthropic.com"
          git config --global user.name "Claude Auto-Fix Bot"

      - name: Fetch failing run logs
        run: |
          set -euo pipefail
          RUN_ID="${{ github.event.workflow_run.id }}"
          mkdir -p .ai-fix logs
          curl -sSL \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/runs/${RUN_ID}/logs" \
            -o logs/failure.zip
          unzip -q logs/failure.zip -d logs || true

      - name: Collect context
        id: ctx
        run: |
          set -euo pipefail
          SHA="${{ github.event.workflow_run.head_sha }}"
          echo "SHA=$SHA" >> $GITHUB_OUTPUT
          echo "=== Changed files at failing SHA ==="
          git fetch --no-tags origin "$SHA"
          git checkout -q "$SHA"
          # Gather key files
          mkdir -p .ai-fix
          cp -f "$TARGET_WORKFLOW" .ai-fix/ 2>/dev/null || true
          # Tail the last 300 lines of all step logs
          find logs -type f -name '*.txt' -exec tail -n 300 {} + > .ai-fix/errors.txt || true

      - name: Ask Claude for unified diff
        id: ai
        run: |
          set -euo pipefail
          WORKFLOW_JSON=$(jq -Rs . < .ai-fix/$(basename "$TARGET_WORKFLOW"))
          ERRORS_JSON=$(jq -Rs . < .ai-fix/errors.txt)
          
          # Debug: Check if we have the required data
          echo "=== Debug Info ==="
          echo "CLAUDE_API_KEY present: $([ -n "$CLAUDE_API_KEY" ] && echo "yes" || echo "no")"
          echo "Workflow JSON length: $(echo "$WORKFLOW_JSON" | wc -c)"
          echo "Errors JSON length: $(echo "$ERRORS_JSON" | wc -c)"
          
          # Create the user content by concatenating the parts
          USER_CONTENT="Repository: ${{ github.repository }}\nCommit: ${{ github.event.workflow_run.head_sha }}\n\nFailing workflow file content:\n"
          USER_CONTENT="${USER_CONTENT}$(echo "$WORKFLOW_JSON" | jq -r .)"
          USER_CONTENT="${USER_CONTENT}\n\nTail of error logs:\n"
          USER_CONTENT="${USER_CONTENT}$(echo "$ERRORS_JSON" | jq -r .)"
          USER_CONTENT="${USER_CONTENT}\n\nReturn ONLY a valid unified diff (git patch) that fixes the failure with minimal changes."
          
          # Use jq to properly construct the JSON payload
          jq -n \
            --arg model "claude-sonnet-4-20250514" \
            --argjson max_tokens 4000 \
            --arg system "You are an expert CI engineer. You will output ONLY a unified diff patch. Keep changes minimal and syntactically correct. If logs show JSON being written as strings, decode them. Ensure curl blocks are correct. Ensure jq filters are type-safe. Fix heredoc blocks and EOF markers." \
            --arg user_content "$USER_CONTENT" \
            '{
              model: $model,
              max_tokens: $max_tokens,
              system: $system,
              messages: [
                {
                  role: "user", 
                  content: $user_content
                }
              ]
            }' > payload.json
          
          # Debug: Show payload size
          echo "Payload size: $(wc -c < payload.json) bytes"
          
          # Make API call with better error handling
          HTTP_CODE=$(curl -w "%{http_code}" -sS https://api.anthropic.com/v1/messages \
            -H "x-api-key: $CLAUDE_API_KEY" \
            -H "anthropic-version: 2023-06-01" \
            -H "Content-Type: application/json" \
            -d @payload.json \
            -o response.json)
          
          echo "API HTTP Code: $HTTP_CODE"
          
          if [ "$HTTP_CODE" != "200" ]; then
            echo "=== API Error Response ==="
            cat response.json || echo "No response body"
            exit 1
          fi
          
          # Extract the response with better error handling
          if ! jq -e '.content[0].text' response.json > /dev/null; then
            echo "=== Unexpected API Response Structure ==="
            cat response.json
            exit 1
          fi
          
          jq -r '.content[0].text' response.json > ai.diff.raw
          
          # Debug: Show what Claude returned
          echo "=== Claude Response Preview ==="
          head -n 20 ai.diff.raw
          
          # Strip markdown code fences if present and extract the actual diff
          if grep -q '^```diff' ai.diff.raw; then
            echo "Stripping markdown code fences..."
            sed -n '/^```diff$/,/^```$/p' ai.diff.raw | sed '1d;$d' > ai.diff
          elif grep -q '^--- ' ai.diff.raw; then
            echo "Raw diff format detected, using as-is..."
            cp ai.diff.raw ai.diff
          else
            echo "Attempting to extract diff from response..."
            # Try to find diff content even if not perfectly formatted
            grep -A 1000 '^--- ' ai.diff.raw > ai.diff || cp ai.diff.raw ai.diff
          fi
          
          # Debug: Show processed diff
          echo "=== Processed Diff Preview ==="
          head -n 10 ai.diff
          
          # basic validation - accept both git diff format and standard unified diff format
          if grep -q '^diff --git ' ai.diff || grep -q '^--- ' ai.diff; then
            echo "âœ… Valid unified diff detected"
          else
            echo "Claude did not return a valid unified diff. Full response:"
            cat ai.diff.raw || echo "ai.diff.raw is empty"
            echo "=== Processed diff was ==="
            cat ai.diff || echo "ai.diff is empty"
            exit 1
          fi
          
          # sanity guard: limit size to ~50KB
          if [ "$(wc -c < ai.diff)" -gt 51200 ]; then
            echo "Proposed diff too large, aborting."
            exit 1
          fi

      - name: Save analysis results
        run: |
          set -euo pipefail
          
          # Create analysis results
          mkdir -p analysis-results
          
          # Save the diff
          cp ai.diff analysis-results/fix.patch
          
          # Save metadata
          cat > analysis-results/metadata.json <<EOF
          {
            "trigger_run_id": "${{ github.event.workflow_run.id }}",
            "trigger_sha": "${{ github.event.workflow_run.head_sha }}",
            "trigger_branch": "${{ github.event.workflow_run.head_branch }}",
            "target_workflow": "$TARGET_WORKFLOW",
            "analysis_time": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "diff_size": $(wc -c < ai.diff)
          }
          EOF
          
          # Save summary for PR description
          cat > analysis-results/summary.md <<EOF
          # AI Auto-Fix Analysis
          
          **Triggered by:** Failed run [${{ github.event.workflow_run.id }}](${{ github.event.workflow_run.html_url }})
          **Target:** \`$TARGET_WORKFLOW\`
          **Branch:** \`${{ github.event.workflow_run.head_branch }}\`
          **Commit:** \`${{ github.event.workflow_run.head_sha }}\`
          
          ## Analysis Summary
          Claude analyzed the workflow failure and generated a fix patch.
          
          **Diff Preview:**
          \`\`\`diff
          $(head -n 20 ai.diff)
          \`\`\`
          EOF
          
          echo "Analysis complete. Results saved to analysis-results/"
          ls -la analysis-results/

      - name: Upload analysis results
        uses: actions/upload-artifact@v4
        with:
          name: claude-analysis-${{ github.event.workflow_run.id }}
          path: analysis-results/
          retention-days: 7

      - name: Trigger application workflow
        run: |
          curl -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github+json" \
            "https://api.github.com/repos/${{ github.repository }}/actions/workflows/claude-apply.yml/dispatches" \
            -d "{\"ref\":\"main\",\"inputs\":{\"analysis_run_id\":\"${{ github.run_id }}\",\"trigger_run_id\":\"${{ github.event.workflow_run.id }}\",\"target_branch\":\"${{ github.event.workflow_run.head_branch }}\",\"target_sha\":\"${{ github.event.workflow_run.head_sha }}\"}}"
