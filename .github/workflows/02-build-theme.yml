# .github/workflows/02-build-theme.yml
name: Build Theme

on:
  workflow_dispatch:
    inputs:
      config_artifact:
        description: 'Configuration artifact name'
        required: true
        type: string
  workflow_call:
    inputs:
      config_artifact:
        required: true
        type: string
    outputs:
      theme_artifact:
        description: "Built theme artifact"
        value: ${{ jobs.build.outputs.artifact_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.upload.outputs['artifact-id'] }}
    steps:
      - uses: actions/checkout@v4

      - name: Download configuration
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.config_artifact }}

      - name: Validate website.json
        run: |
          set -e
          cat > schema.json <<'SCHEMA'
          {
            "type":"object",
            "required":["slug","name","tagline","nav","pages","colorPalette","typography","ecommerce"],
            "properties":{
              "slug":{"type":"string"},
              "name":{"type":"string"},
              "tagline":{"type":"string"},
              "nav":{"type":"array","items":{"type":"object","required":["label","href"]}},
              "pages":{"type":"array","items":{"type":"object","required":["slug","title","sections"]}},
              "colorPalette":{"type":"object","required":["primary","secondary","accent"]},
              "typography":{"type":"object","required":["headingFont","bodyFont"]},
              "ecommerce":{"type":"object","properties":{"enabled":{"type":"boolean"}}}
            }
          }
          SCHEMA
          npm -g i ajv-cli >/dev/null 2>&1
          ajv validate -s schema.json -d website.json

      - name: Extract configuration values
        id: config
        run: |
          echo "slug=$(jq -r '.slug // "business-site"' website.json)"        >> $GITHUB_OUTPUT
          echo "name=$(jq -r '.name // "Your Business"' website.json)"        >> $GITHUB_OUTPUT
          echo "tagline=$(jq -r '.tagline // "Professional services"' website.json)" >> $GITHUB_OUTPUT
          echo "brand=$(jq -r '.colorPalette.primary // "#2563eb"' website.json)"   >> $GITHUB_OUTPUT
          echo "accent=$(jq -r '.colorPalette.accent // "#1d4ed8"' website.json)"   >> $GITHUB_OUTPUT
          echo "hero=$(jq -r '.heroSection.heroImage // ""' website.json)"          >> $GITHUB_OUTPUT

      - name: Generate theme files
        env:
          SLUG:    ${{ steps.config.outputs.slug }}
          NAME:    ${{ steps.config.outputs.name }}
          TAGLINE: ${{ steps.config.outputs.tagline }}
          BRAND:   ${{ steps.config.outputs.brand }}
          ACCENT:  ${{ steps.config.outputs.accent }}
        run: |
          set -e
          THEME_DIR="${SLUG}-child"
          mkdir -p "$THEME_DIR/assets/css" "$THEME_DIR/assets/js" "$THEME_DIR/assets/img" "$THEME_DIR/dist" "$THEME_DIR/patterns"

          # style.css
          cat > "$THEME_DIR/style.css" << EOF
          /*
          Theme Name: ${NAME}
          Description: AI-generated professional website built with SiteFuse
          Template: sitefuse-base
          Text Domain: ${SLUG}-child
          Version: 1.1.0
          */
          EOF

          # functions.php (adds pattern category too)
          cat > "$THEME_DIR/functions.php" << 'EOF'
          <?php
          add_action('wp_enqueue_scripts', function () {
              $parent_css = get_template_directory_uri() . '/dist/tailwind.css';
              wp_enqueue_style('sitefuse-parent', $parent_css, [], null);
              $child_css_path = get_stylesheet_directory() . '/dist/tailwind.css';
              $child_css_ver = file_exists($child_css_path) ? filemtime($child_css_path) : '1.0.0';
              wp_enqueue_style('sitefuse-child', get_stylesheet_directory_uri() . '/dist/tailwind.css', ['sitefuse-parent'], $child_css_ver);
              wp_enqueue_script('sitefuse-theme', get_stylesheet_directory_uri() . '/assets/js/theme.js', [], $child_css_ver, true);
          });
          add_action('after_setup_theme', function () {
              add_theme_support('post-thumbnails');
              add_theme_support('custom-logo');
              add_theme_support('title-tag');
              register_nav_menus(['primary' => 'Primary Navigation', 'footer' => 'Footer Navigation']);
          });
          add_action('init', function () {
              if (function_exists('register_block_pattern_category')) {
                  register_block_pattern_category('sitefuse', ['label' => __('SiteFuse', 'sitefuse')]);
              }
          });
          function get_theme_image($image_name, $fallback_url = '') {
              $theme_image = get_stylesheet_directory_uri() . '/assets/img/' . $image_name;
              $theme_path = get_stylesheet_directory() . '/assets/img/' . $image_name;
              if (file_exists($theme_path)) return $theme_image;
              return $fallback_url ?: 'https://images.unsplash.com/photo-1497366216548-37526070297c?w=800&h=600&fit=crop';
          }
          EOF

          # base CSS tokens
          cat > "$THEME_DIR/assets/css/tailwind.css" << EOF
          @tailwind base;
          @tailwind components;
          @tailwind utilities;
          @layer base {
            :root {
              --color-brand-primary: ${BRAND};
              --color-brand-accent:  ${ACCENT};
              --color-cream: #fefaf6;
              --color-dark:  #1f2937;
            }
            html { scroll-behavior: smooth; }
            body {
              font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
              line-height: 1.7;
              color: var(--color-dark);
              background-color: var(--color-cream);
            }
          }
          @layer components {
            .container { width: 100%; margin: 0 auto; padding: 0 1rem; max-width: 80rem; }
            .btn { display: inline-flex; align-items: center; justify-content: center; padding: 0.875rem 2rem; border-radius: 0.75rem; font-weight: 600; transition: all 0.3s; text-decoration: none; }
            .btn-primary { background: linear-gradient(135deg, var(--color-brand-primary), var(--color-brand-accent)); color: white; box-shadow: 0 10px 25px rgba(0,0,0,0.15); }
            .btn-primary:hover { box-shadow: 0 15px 35px rgba(0,0,0,0.2); transform: translateY(-2px); }
            .section-title { font-size: 2.5rem; font-weight: 800; margin-bottom: 1rem; color: var(--color-dark); }
            .hero-section { position: relative; min-height: 80vh; display: flex; align-items: center; justify-content: center; background: linear-gradient(135deg, rgba(0,0,0,0.35), rgba(0,0,0,0.55)); }
          }
          EOF

          # include website.json for deploy
          cp website.json "$THEME_DIR/"

      - name: Build Tailwind CSS
        env:
          SLUG: ${{ steps.config.outputs.slug }}
        run: |
          set -e
          curl -sL https://github.com/tailwindlabs/tailwindcss/releases/download/v3.4.1/tailwindcss-linux-x64 -o tailwindcss
          chmod +x tailwindcss
          THEME_DIR="${SLUG}-child"
          cat > "$THEME_DIR/tailwind.config.js" << 'EOF'
          module.exports = {
            content: ['./**/*.php'],
            safelist: [
              'container','btn','btn-primary','section-title','hero-section',
              'text-center','text-white','bg-white','bg-gray-50','py-16',
              'px-4','mb-6','mb-8','text-4xl','text-6xl','font-bold'
            ],
            theme: { extend: {} },
            plugins: []
          }
          EOF
          ./tailwindcss --config "$THEME_DIR/tailwind.config.js" --input "$THEME_DIR/assets/css/tailwind.css" --output "$THEME_DIR/dist/tailwind.css" --minify

      - name: Generate PHP templates including customSections loop
        env:
          SLUG: ${{ steps.config.outputs.slug }}
        run: |
          set -e
          THEME_DIR="${SLUG}-child"

          # front-page.php with customSections rendering
          cat > "$THEME_DIR/front-page.php" << 'EOF'
          <?php
          get_header();

          $config = [];
          $path = ABSPATH . 'website.json';
          if (file_exists($path) && is_readable($path)) {
              $raw = file_get_contents($path);
              $data = json_decode($raw, true);
              if (json_last_error() === JSON_ERROR_NONE && is_array($data)) {
                  $config = $data;
              }
          }

          $hero_html  = $config['heroSection']['customHTML'] ?? '';
          $hero_image = $config['heroSection']['heroImage'] ?? get_theme_image('hero.jpg');
          $site_name  = get_bloginfo('name');
          $site_tag   = get_bloginfo('description');
          ?>
          <main id="main" class="site-main">
            <section class="hero-section relative">
              <div class="absolute inset-0">
                <?php if ($hero_image): ?>
                  <img src="<?php echo esc_url($hero_image); ?>" alt="<?php echo esc_attr($site_name); ?>" class="w-full h-full object-cover" />
                <?php endif; ?>
              </div>
              <div class="relative z-10 container text-center text-white py-24">
                <?php
                if (!empty($hero_html)) {
                  echo wp_kses_post($hero_html);
                } else {
                  echo '<h1 class="text-4xl font-bold mb-6">'.esc_html($site_name).'</h1>';
                  echo '<p class="text-xl mb-8">'.esc_html($site_tag).'</p>';
                  echo '<a href="#contact" class="btn btn-primary">Get Started</a>';
                }
                ?>
              </div>
            </section>

            <?php
            if (!empty($config['customSections']) && is_array($config['customSections'])) {
                foreach ($config['customSections'] as $i => $section) {
                    if (!empty($section['html']) && is_string($section['html'])) {
                        echo "\n<!-- ai-section-$i -->\n";
                        echo wp_kses_post($section['html']);
                    }
                }
            }
            ?>
          </main>
          <?php get_footer(); ?>
          EOF

          # header.php
          cat > "$THEME_DIR/header.php" << 'EOF'
          <!DOCTYPE html>
          <html <?php language_attributes(); ?>>
          <head>
            <meta charset="<?php bloginfo('charset'); ?>">
            <meta name="viewport" content="width=device-width, initial-scale=1">
            <?php wp_head(); ?>
          </head>
          <body <?php body_class('font-sans antialiased'); ?>>
            <header class="sticky top-0 z-40 bg-white/95 backdrop-blur-md border-b">
              <div class="container">
                <div class="flex items-center justify-between h-20">
                  <a href="<?php echo esc_url(home_url('/')); ?>">
                    <span class="text-2xl font-bold" style="color: var(--color-brand-primary);"><?php bloginfo('name'); ?></span>
                  </a>
                  <nav class="hidden lg:flex items-center space-x-4">
                    <?php wp_nav_menu(['theme_location'=>'primary','container'=>false]); ?>
                  </nav>
                </div>
              </div>
            </header>
          EOF

          # footer.php
          cat > "$THEME_DIR/footer.php" << 'EOF'
          <footer class="bg-gray-900 text-gray-300 mt-20">
            <div class="container py-16">
              <div class="text-center">
                <h3 class="text-2xl font-bold mb-4"><?php bloginfo('name'); ?></h3>
                <p class="mb-6"><?php echo esc_html(get_bloginfo('description')); ?></p>
                <p class="text-sm">© <?php echo date('Y'); ?> <?php bloginfo('name'); ?>. All rights reserved.</p>
              </div>
            </div>
            <?php wp_footer(); ?>
          </body>
          </html>
          EOF

          # index.php
          cat > "$THEME_DIR/index.php" << 'EOF'
          <?php get_header(); ?>
          <main id="main" class="container py-20">
            <?php if (have_posts()) : while (have_posts()) : the_post(); the_content(); endwhile; endif; ?>
          </main>
          <?php get_footer(); ?>
          EOF

      - name: Generate block patterns from pages[].sections[]
        env:
          SLUG: ${{ steps.config.outputs.slug }}
        run: |
          set -e
          THEME_DIR="${SLUG}-child"
          mkdir -p "$THEME_DIR/patterns"
          i=0
          jq -c '.pages[] | {slug,sections}' website.json | while read -r page; do
            page_slug=$(jq -r '.slug' <<<"$page")
            jq -c '.sections[]' <<<"$page" | while read -r section; do
              title=$(jq -r '.type // "section"' <<<"$section")
              html=$(jq -r '.html // ""' <<<"$section")
              printf '%s\n' \
                "<?php" \
                "/**" \
                " * Title: ${title^} (${page_slug})" \
                " * Slug: sitefuse/${page_slug}-${i}" \
                " * Categories: sitefuse" \
                " */" \
                "?>" \
                "$html" \
                > "$THEME_DIR/patterns/${page_slug}-${i}.php"
              i=$((i+1))
            done
          done

      - name: Upload built theme
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: theme-${{ steps.config.outputs.slug }}-${{ github.run_id }}
          path: ${{ steps.config.outputs.slug }}-child/
          retention-days: 1
