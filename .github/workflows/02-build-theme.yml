# .github/workflows/02-build-theme.yml
name: Build Theme

on:
  workflow_dispatch:
    inputs:
      config_artifact:
        description: 'Configuration artifact name'
        required: true
        type: string
  workflow_call:
    inputs:
      config_artifact:
        required: true
        type: string
    outputs:
      theme_artifact:
        description: "Built theme artifact"
        value: ${{ jobs.build.outputs.artifact_id }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      artifact_id: ${{ steps.upload.outputs.artifact-id }}
    steps:
      - uses: actions/checkout@v4

      - name: Download configuration
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.config_artifact }}

      - name: Validate website.json
        run: |
          set -e
          cat > schema.json <<'SCHEMA'
          {
            "type":"object",
            "required":["slug","name","tagline","nav","pages","colorPalette","typography","ecommerce"],
            "properties":{
              "slug":{"type":"string"},
              "name":{"type":"string"},
              "tagline":{"type":"string"},
              "nav":{"type":"array","items":{"type":"object","required":["label","href"]}},
              "pages":{"type":"array","items":{"type":"object","required":["slug","title","sections"]}},
              "colorPalette":{"type":"object","required":["primary","secondary","accent"]},
              "typography":{"type":"object","required":["headingFont","bodyFont"]},
              "ecommerce":{"type":"object","properties":{"enabled":{"type":"boolean"}}}
            }
          }
          SCHEMA
          npm -g i ajv-cli >/dev/null 2>&1
          ajv validate -s schema.json -d website.json

      - name: Extract configuration values
        id: config
        run: |
          echo "slug=$(jq -r '.slug // "business-site"' website.json)" >> $GITHUB_OUTPUT
          echo "name=$(jq -r '.name // "Your Business"' website.json)" >> $GITHUB_OUTPUT
          echo "tagline=$(jq -r '.tagline // "Professional services you can trust"' website.json)" >> $GITHUB_OUTPUT
          echo "brand=$(jq -r '.colorPalette.primary // "#2563eb"' website.json)" >> $GITHUB_OUTPUT
          echo "accent=$(jq -r '.colorPalette.accent // "#1d4ed8"' website.json)" >> $GITHUB_OUTPUT

      - name: Generate block child theme with patterns
        env:
          SLUG: ${{ steps.config.outputs.slug }}
          NAME: ${{ steps.config.outputs.name }}
          TAGLINE: ${{ steps.config.outputs.tagline }}
          BRAND: ${{ steps.config.outputs.brand }}
          ACCENT: ${{ steps.config.outputs.accent }}
        run: |
          set -e
          THEME_DIR="${SLUG}-child"
          mkdir -p "$THEME_DIR"/{assets/css,assets/js,assets/img,dist,templates,parts,patterns}

          # style.css header, marks this as a child of sitefuse-base
          cat > "$THEME_DIR/style.css" <<EOF
          /*
          Theme Name: ${NAME}
          Description: AI-generated child theme with block templates and patterns
          Template: sitefuse-base
          Text Domain: ${SLUG}-child
          Version: 1.1.0
          */
          EOF

          # theme.json with palette and basic styles
          jq -n --arg brand "$BRAND" --arg accent "$ACCENT" '{
            "$schema": "https://schemas.wp.org/trunk/theme.json",
            "version": 2,
            "settings": {
              "color": {
                "palette": [
                  {"slug":"brand","name":"Brand","color": $brand},
                  {"slug":"accent","name":"Accent","color": $accent},
                  {"slug":"base","name":"Base","color":"#1f2937"},
                  {"slug":"cream","name":"Cream","color":"#fefaf6"}
                ]
              },
              "typography": { "fontFamilies": [
                { "fontFamily": "Inter", "slug": "inter", "name": "Inter" }
              ]}
            },
            "styles": {
              "color": {"text":"#1f2937","background":"#fefaf6"}
            }
          }' > "$THEME_DIR/theme.json"

          # Template parts
          cat > "$THEME_DIR/parts/header.html" <<'EOF'
          <!-- wp:group {"style":{"spacing":{"padding":{"top":"10px","bottom":"10px"}}},"layout":{"type":"constrained"}} -->
            <!-- wp:site-title {"level":2} /-->
            <!-- wp:navigation {"layout":{"type":"flex","justifyContent":"right"}} /-->
          <!-- /wp:group -->
          EOF
          cat > "$THEME_DIR/parts/footer.html" <<'EOF'
          <!-- wp:group {"style":{"spacing":{"padding":{"top":"40px","bottom":"40px"}}},"backgroundColor":"base","textColor":"cream","layout":{"type":"constrained"}} -->
            <!-- wp:paragraph {"align":"center"} --><p>Â© <em class="wp-block-site-title"></em></p><!-- /wp:paragraph -->
          <!-- /wp:group -->
          EOF

          # Block templates
          cat > "$THEME_DIR/templates/front-page.html" <<'EOF'
          <!-- wp:template-part {"slug":"header"} /-->
          <!-- wp:post-content /-->
          <!-- wp:template-part {"slug":"footer"} /-->
          EOF
          cat > "$THEME_DIR/templates/index.html" <<'EOF'
          <!-- wp:template-part {"slug":"header"} /-->
          <!-- wp:post-content /-->
          <!-- wp:template-part {"slug":"footer"} /-->
          EOF

          # functions.php registers menus and pattern category
          cat > "$THEME_DIR/functions.php" <<'PHP'
          <?php
          add_action('after_setup_theme', function () {
            add_theme_support('title-tag');
            add_theme_support('post-thumbnails');
            register_nav_menus(['primary' => 'Primary Navigation','footer'=>'Footer Navigation']);
          });
          add_action('init', function () {
            register_block_pattern_category('sitefuse', ['label' => __('SiteFuse', 'sitefuse')]);
          });
          PHP

          # Generate a pattern per section for each page
          i=0
          jq -c '.pages[] | {slug,title,sections}' website.json | while read -r page; do
            page_slug=$(jq -r '.slug' <<<"$page")
            jq -c '.sections[]' <<<"$page" | while read -r section; do
              title=$(jq -r '.type // "section"' <<<"$section")
              html=$(jq -r '.html // ""' <<<"$section")
              # Pattern PHP file
              printf '%s\n' \
                "<?php" \
                "/**" \
                " * Title: ${title^} (${page_slug})" \
                " * Slug: sitefuse/${page_slug}-${i}" \
                " * Categories: sitefuse" \
                " */" \
                "?>" \
                "$html" \
                > "$THEME_DIR/patterns/${page_slug}-${i}.php"
              i=$((i+1))
            done
          done

          # Minimal CSS scaffold, you can keep Tailwind if you want
          cat > "$THEME_DIR/assets/css/tokens.css" <<EOF
          :root{
            --color-brand-primary:${BRAND};
            --color-brand-accent:${ACCENT};
            --color-cream:#fefaf6;
            --color-dark:#1f2937;
          }
          .container{max-width:80rem;margin:0 auto;padding:0 1rem;}
          .btn{display:inline-flex;align-items:center;justify-content:center;padding:.875rem 2rem;border-radius:.75rem;font-weight:600;text-decoration:none}
          .btn-primary{background:linear-gradient(135deg,var(--color-brand-primary),var(--color-brand-accent));color:#fff}
          .hero-section{position:relative;min-height:70vh;display:flex;align-items:center;justify-content:center}
          EOF

          # Include website.json inside the theme for convenience on the server
          cp website.json "$THEME_DIR/"

      - name: Upload built theme
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: theme-${{ steps.config.outputs.slug }}-${{ github.run_id }}
          path: ${{ steps.config.outputs.slug }}-child/
          retention-days: 1
          name: theme-${{ steps.config.outputs.slug }}-${{ github.run_id }}
          path: ${{ steps.config.outputs.slug }}-child/
          retention-days: 1
